openapi: 3.0.3
info:
  title: Lago API documentation
  description: Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
  version: 0.37.0-beta
  license:
    name: AGPLv3
  contact:
    email: tech@getlago.com
externalDocs:
  description: Lago Github
  url: 'https://github.com/getlago'
servers:
  - url: 'https://api.getlago.com/api/v1'
security:
  - bearerAuth: []
tags:
  - name: billable_metrics
    description: Everything about Billable metric collection
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/billable_metrics/billable-metric-object'
  - name: customers
    description: Everything about Customer collection
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/customers/customer-object'
  - name: subscriptions
    description: Everything about Subscription collection
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/subscriptions/subscription-object'
  - name: add_ons
    description: Everything about Add-on collection
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/add_ons/add-on-object'
  - name: coupons
    description: Everything about Coupon collection
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/coupons/coupon-object'
  - name: organizations
    description: Everything about Organization collection
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/organizations/organization-object'
  - name: events
    description: Everything about Event collection
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/events/event-object'
  - name: plans
    description: Everything about Plan collection
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/plans/plan-object'
  - name: webhooks
    description: Everything about Webhooks
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/webhooks/message-signature#1-retrieve-the-public-key'
  - name: invoices
    description: Everything about Invoice collection
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/invoices/invoice-object'
  - name: fees
    description: Everything about Fees
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/invoices/invoice-object#fee-object'
  - name: wallets
    description: Everything about Wallet collection
    externalDocs:
      description: Find out more
      url: 'https://doc.getlago.com/docs/api/wallets/wallet-object'
  - name: credit_notes
    description: Everything about Credit notes collection
paths:
  /billable_metrics:
    post:
      tags:
        - billable_metrics
      summary: Create a billable metric
      description: This endpoint creates a new billable metric representing a pricing component of your application.
      operationId: createBillableMetric
      requestBody:
        description: Billable metric payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillableMetricCreateInput'
        required: true
      responses:
        '200':
          description: Billable metric created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillableMetric'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - billable_metrics
      summary: List all billable metrics
      description: This endpoint retrieves all existing billable metrics that represent pricing components of your application.
      operationId: findAllBillableMetrics
      parameters:
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
      responses:
        '200':
          description: List of billable metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillableMetricsPaginated'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  '/billable_metrics/{code}':
    parameters:
      - name: code
        in: path
        description: Code of the existing billable metric.
        required: true
        schema:
          type: string
          example: storage
    put:
      tags:
        - billable_metrics
      summary: Update a billable metric
      description: This endpoint updates an existing billable metric representing a pricing component of your application.
      operationId: updateBillableMetric
      requestBody:
        description: Billable metric payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillableMetricUpdateInput'
        required: true
      responses:
        '200':
          description: Billable metric updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillableMetric'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    delete:
      tags:
        - billable_metrics
      summary: Delete a billable metric
      description: This endpoint deletes an existing billable metric representing a pricing component of your application.
      operationId: destroyBillableMetric
      responses:
        '200':
          description: Billable metric deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillableMetric'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
    get:
      tags:
        - billable_metrics
      summary: Retrieve a billable metric
      description: This endpoint retrieves an existing billable metric that represents a pricing component of your application. The billable metric is identified by its unique code.
      operationId: findBillableMetric
      responses:
        '200':
          description: Billable metric
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillableMetric'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  '/billable_metrics/{code}/groups':
    get:
      tags:
        - billable_metrics
      summary: Find a billable metric's groups
      description: This endpoint retrieves all groups for a billable metric.
      operationId: findAllBillableMetricGroups
      parameters:
        - name: code
          in: path
          description: Code of the existing billable metric.
          required: true
          schema:
            type: string
            example: example_code
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
      responses:
        '200':
          description: List of billable metric's groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsPaginated'
              example:
                groups:
                  - lago_id: 1a901a90-1a90-1a90-1a90-1a901a901a90
                    key: region
                    value: us-east-1
                  - lago_id: 1a901a90-1a90-1a90-1a90-1a901a288d80
                    key: region
                    value: us-east-2
                  - lago_id: 3b288a90-1a20-1a90-1a90-1a921d921a90
                    key: region
                    value: eu-west-1
                meta:
                  current_page: 1
                  next_page: null
                  prev_page: null
                  total_pages: 1
                  total_count: 2
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  /customers:
    post:
      tags:
        - customers
      summary: Create a customer
      description: This endpoint creates a new customer.
      operationId: createCustomer
      requestBody:
        description: Customer payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateInput'
        required: true
      responses:
        '200':
          description: Customer created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - customers
      summary: List all customers
      description: This endpoint retrieves all existing customers.
      operationId: findAllCustomers
      parameters:
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersPaginated'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  '/customers/{external_id}':
    parameters:
      - name: external_id
        in: path
        description: External ID of the existing customer
        required: true
        schema:
          type: string
          example: 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
    get:
      tags:
        - customers
      summary: Retrieve a customer
      description: This endpoint retrieves an existing customer.
      operationId: findCustomer
      responses:
        '200':
          description: Customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
    delete:
      tags:
        - customers
      summary: Delete a customer
      description: This endpoint deletes an existing customer.
      operationId: destroyCustomer
      responses:
        '200':
          description: Customer deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  '/customers/{external_customer_id}/portal_url':
    get:
      tags:
        - customers
      summary: Get a customer portal URL
      description: |-
        Retrieves an embeddable link for displaying a customer portal.

        This endpoint allows you to fetch the URL that can be embedded to provide customers access to a dedicated portal
      parameters:
        - name: external_customer_id
          in: path
          description: External ID of the existing customer
          required: true
          schema:
            type: string
            example: 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
      operationId: getCustomerPortalUrl
      responses:
        '200':
          description: Portal URL
          content:
            application/json:
              schema:
                type: object
                required:
                  - customer
                properties:
                  customer:
                    type: object
                    required:
                      - portal_url
                    properties:
                      portal_url:
                        type: string
                        example: 'https://app.lago.com/customer-portal/1234567890'
                        description: An embeddable link for displaying a customer portal
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  /subscriptions:
    post:
      tags:
        - subscriptions
      summary: Assign a plan to a customer
      description: 'This endpoint assigns a plan to a customer, creating or modifying a subscription. Ideal for initial subscriptions or plan changes (upgrades/downgrades).'
      operationId: createSubscription
      requestBody:
        description: Subscription payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCreateInput'
        required: true
      responses:
        '200':
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - subscriptions
      summary: List all subscriptions
      description: This endpoint retrieves all active subscriptions.
      operationId: findAllSubscriptions
      parameters:
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
        - name: external_customer_id
          in: query
          description: The customer external unique identifier (provided by your own application)
          required: false
          explode: true
          schema:
            type: string
            example: 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
        - name: plan_code
          in: query
          description: The unique code representing the plan to be attached to the customer. This code must correspond to the code property of one of the active plans.
          required: false
          explode: true
          schema:
            type: string
            example: premium
      responses:
        '200':
          description: List of subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionsPaginated'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  '/subscriptions/{external_id}':
    parameters:
      - name: external_id
        in: path
        description: External ID of the existing subscription
        required: true
        schema:
          type: string
          example: 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
    put:
      tags:
        - subscriptions
      summary: Update a subscription
      description: This endpoint allows you to update a subscription.
      operationId: updateSubscription
      requestBody:
        description: Update an existing subscription
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpdateInput'
        required: true
      responses:
        '200':
          description: Subscription updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    delete:
      tags:
        - subscriptions
      summary: Terminate a subscription
      description: This endpoint allows you to terminate a subscription.
      operationId: destroySubscription
      responses:
        '200':
          description: Subscription terminated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '405':
          $ref: '#/paths/~1wallets~1%7Bid%7D/delete/responses/405'
  /add_ons:
    post:
      tags:
        - add_ons
      summary: Create a new add-on
      description: Create a new add-on
      operationId: createAddOn
      requestBody:
        description: Add-on payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOnInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - add_ons
      summary: Find add-ons
      description: Find all add-ons in certain organisation
      operationId: findAllAddOns
      parameters:
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOnsPaginated'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  '/add_ons/{code}':
    parameters:
      - name: code
        in: path
        description: Code of the existing add-on
        required: true
        schema:
          type: string
          example: example_code
    put:
      tags:
        - add_ons
      summary: Update an existing add-on
      description: Update an existing add-on by code
      operationId: updateAddOn
      requestBody:
        description: Update an existing add-on
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOnInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - add_ons
      summary: Find add-on by code
      description: Return a single add-on
      operationId: findAddOn
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
    delete:
      tags:
        - add_ons
      summary: Delete an add-on
      description: Delete an add-on
      operationId: destroyAddOn
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  /applied_add_ons:
    post:
      tags:
        - add_ons
      summary: Apply an add-on to a customer
      description: Apply an add-on to a customer
      operationId: applyAddOn
      requestBody:
        description: Apply add-on payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppliedAddOnInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedAddOn'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
  /coupons:
    post:
      tags:
        - coupons
      summary: Create a new coupon
      description: Create a new coupon
      operationId: createCoupon
      requestBody:
        description: Coupon payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - coupons
      summary: Find Coupons
      description: Find all coupons in certain organisation
      operationId: findAllCoupons
      parameters:
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponsPaginated'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  '/coupons/{code}':
    parameters:
      - name: code
        in: path
        description: Code of the existing coupon
        required: true
        schema:
          type: string
          example: example_code
    put:
      tags:
        - coupons
      summary: Update an existing coupon
      description: Update an existing coupon by code
      operationId: updateCoupon
      requestBody:
        description: Update an existing coupon
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - coupons
      summary: Find coupon by code
      description: Return a single coupon
      operationId: findCoupon
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
    delete:
      tags:
        - coupons
      summary: Delete a coupon
      description: Delete a coupon
      operationId: destroyCoupon
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  /applied_coupons:
    post:
      tags:
        - coupons
      summary: Apply a coupon to a customer
      description: Apply a coupon to a customer
      operationId: applyCoupon
      requestBody:
        description: Apply coupon payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppliedCouponInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedCoupon'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - coupons
      summary: Find Applied Coupons
      description: Find all applied coupons
      operationId: findAllAppliedCoupons
      parameters:
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
        - name: status
          in: query
          description: Applied coupon status
          required: false
          explode: true
          schema:
            type: string
            description: Status
            enum:
              - active
              - terminated
        - name: external_customer_id
          in: query
          description: External customer ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedCouponsPaginated'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  /organizations:
    put:
      tags:
        - organizations
      summary: Update an existing Organization
      description: Update an existing organization
      operationId: updateOrganization
      requestBody:
        description: Update an existing organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
  '/customers/{external_customer_id}/current_usage':
    get:
      tags:
        - customers
      summary: Find customer current usage
      parameters:
        - name: external_customer_id
          in: path
          description: External ID of the existing customer
          required: true
          schema:
            type: string
            example: '12345'
        - name: external_subscription_id
          in: query
          description: External subscription ID
          required: true
          explode: true
          schema:
            type: string
            example: '54321'
      description: Return a customer current usage
      operationId: findCustomerCurrentUsage
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerUsage'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  '/customers/{external_customer_id}/applied_coupons/{applied_coupon_id}':
    delete:
      tags:
        - customers
      summary: Delete customer's appplied coupon
      parameters:
        - name: external_customer_id
          in: path
          description: External ID of the existing customer
          required: true
          schema:
            type: string
            example: '12345'
        - name: applied_coupon_id
          in: path
          description: Applied Coupon Lago ID
          required: true
          explode: true
          schema:
            type: string
            example: '54321'
      description: Delete customer's appplied coupon
      operationId: deleteAppliedCoupon
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedCoupon'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  /events:
    post:
      tags:
        - events
      summary: Create a new event
      description: Create a new event
      operationId: createEvent
      requestBody:
        description: Event payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
        required: true
      responses:
        '200':
          description: Successful response
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
  /events/batch:
    post:
      tags:
        - events
      summary: Create batch events
      description: Create batch events
      operationId: createBatchEvents
      requestBody:
        description: Batch events payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchEventInput'
        required: true
      responses:
        '200':
          description: Successful response
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
  '/events/{id}':
    parameters:
      - name: id
        in: path
        description: Id of the existing transaction
        required: true
        schema:
          type: string
          example: '12345'
    get:
      tags:
        - events
      summary: Find event by transaction ID
      description: Return a single event
      operationId: findEvent
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  /events/estimate_fees:
    post:
      tags:
        - events
      summary: Estimate fees for an pay in advance charge
      description: Estimate the fees that would be created after reception of an event for a billable metric attached to one or multiple pay in advance charges
      operationId: eventEstimateFees
      requestBody:
        description: Event payload for pay in advance fee estimate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventEstimateFeesInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fees'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
  /plans:
    post:
      tags:
        - plans
      summary: Create a new plan
      description: Create a new plan
      operationId: createPlan
      requestBody:
        description: Plan payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorBadRequest'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorNotFound'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - plans
      summary: Find plans
      description: Find all plans in certain organisation
      operationId: findAllPlans
      parameters:
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlansPaginated'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  '/plans/{code}':
    parameters:
      - name: code
        in: path
        description: Code of the existing plan
        required: true
        schema:
          type: string
          example: example_code
    put:
      tags:
        - plans
      summary: Update an existing plan
      description: Update an existing plan by code
      operationId: updatePlan
      requestBody:
        description: Update an existing plan
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - plans
      summary: Find plan by code
      description: Return a single plan
      operationId: findPlan
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
    delete:
      tags:
        - plans
      summary: Delete a plan
      description: Delete a plan
      operationId: destroyPlan
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  /webhooks/public_key:
    get:
      tags:
        - webhooks
      summary: Fetch webhook public key
      description: Webhook public key
      operationId: fetchPublicKey
      responses:
        '200':
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
                example: MEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ctbT3/Qp84+KeFhnii7NT7fELilKUSnxS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  /invoices:
    post:
      tags:
        - invoices
      summary: Create a new invoice
      description: Create a new one off Invoice
      operationId: createInvoice
      requestBody:
        description: Invoice payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceOneOffInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - invoices
      summary: Find all invoices
      description: Find all invoices in certain organisation
      operationId: findAllInvoices
      parameters:
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
        - name: external_customer_id
          in: query
          description: External customer ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
        - name: issuing_date_from
          in: query
          description: Date from
          required: false
          explode: true
          schema:
            type: string
            format: date
            example: '2022-07-08'
        - name: issuing_date_to
          in: query
          description: Date to
          required: false
          explode: true
          schema:
            type: string
            format: date
            example: '2022-08-09'
        - name: status
          in: query
          description: Status
          required: false
          explode: true
          schema:
            type: string
            enum:
              - draft
              - finalized
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesPaginated'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  '/invoices/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the existing Lago Invoice
        required: true
        schema:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
    put:
      tags:
        - invoices
      summary: Update an existing invoice status
      description: Update an existing invoice
      operationId: updateInvoice
      requestBody:
        description: Update an existing invoice
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - invoices
      summary: Find invoice by ID
      description: Return a single invoice
      operationId: findInvoice
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  '/invoices/{id}/download':
    post:
      tags:
        - invoices
      summary: Download an existing invoice
      parameters:
        - name: id
          in: path
          description: ID of the existing Lago Invoice
          required: true
          schema:
            type: string
            format: uuid
            example: 1a901a90-1a90-1a90-1a90-1a901a901a90
      description: Download an existing invoice
      operationId: downloadInvoice
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  '/invoices/{id}/retry_payment':
    post:
      tags:
        - invoices
      summary: Retry invoice payment
      parameters:
        - name: id
          in: path
          description: ID of the existing Lago Invoice
          required: true
          schema:
            type: string
            format: uuid
            example: 1a901a90-1a90-1a90-1a90-1a901a901a90
      description: Retry invoice payment
      operationId: retryPayment
      responses:
        '200':
          description: Successful response
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '405':
          $ref: '#/paths/~1wallets~1%7Bid%7D/delete/responses/405'
  '/invoices/{id}/refresh':
    put:
      tags:
        - invoices
      summary: Refresh a draft invoice
      parameters:
        - name: id
          in: path
          description: ID of the existing Lago Invoice
          required: true
          schema:
            type: string
            format: uuid
            example: 1a901a90-1a90-1a90-1a90-1a901a901a90
      description: Refresh a draft invoice
      operationId: refreshInvoice
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  '/invoices/{id}/finalize':
    put:
      tags:
        - invoices
      summary: Finalize a draft invoice
      parameters:
        - name: id
          in: path
          description: ID of the draft Lago Invoice
          required: true
          schema:
            type: string
            format: uuid
            example: 1a901a90-1a90-1a90-1a90-1a901a901a90
      description: Finalize a draft invoice
      operationId: finalizeInvoice
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  '/fees/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the existing Lago Fee
        required: true
        schema:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
    get:
      tags:
        - fees
      summary: Find fee by ID
      description: Return a single fee
      operationId: findFee
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeObject'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
    put:
      tags:
        - fees
      summary: Update an existing fee
      description: Update an existing fee
      operationId: updateFee
      requestBody:
        description: Payload to update a fee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeUpdateInput'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeObject'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
  /fees:
    get:
      tags:
        - fees
      summary: Find all fees
      description: Find all fees of an organization and filter them
      operationId: findAllFees
      parameters:
        - name: page
          in: query
          description: Page number.
          required: false
          explode: true
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: Number of records per page.
          required: false
          explode: true
          schema:
            type: integer
            example: 20
        - name: external_customer_id
          in: query
          description: External customer ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
        - name: external_subscription_id
          in: query
          description: External subscription ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
        - name: currency
          in: query
          description: Amount currency
          required: false
          explode: true
          schema:
            type: string
            example: EUR
        - name: fee_type
          in: query
          description: Fee type
          required: false
          explode: true
          schema:
            type: string
            enum:
              - charge
              - add_on
              - subscription
              - credit
              - instant_charge
            example: charge
        - name: billable_metric_code
          in: query
          description: Code of the source billable metric
          required: false
          explode: true
          schema:
            type: string
            example: bm_code
        - name: payment_status
          in: query
          description: Payment status
          required: false
          explode: true
          schema:
            type: string
            enum:
              - pending
              - succeeded
              - failed
              - refunded
            example: succeeded
        - name: created_at_from
          in: query
          description: Creation datetime from
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: created_at_to
          in: query
          description: Creation date to
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: succeeded_at_from
          in: query
          description: Payment succees date from
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: succeeded_at_to
          in: query
          description: Payment succees date to
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: failed_at_from
          in: query
          description: Payment failed date from
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: failed_at_to
          in: query
          description: Payment failed date to
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: refunded_at_from
          in: query
          description: Payment refund date from
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: refunded_at_to
          in: query
          description: Payment refund date to
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeesPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorUnprocessableEntity'
  /wallets:
    post:
      tags:
        - wallets
      summary: Create a new wallet
      description: Create a new wallet
      operationId: createWallet
      requestBody:
        description: Wallet payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - wallets
      summary: Find wallets
      description: Find all wallets for certain customer
      operationId: findAllWallets
      parameters:
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
        - name: external_customer_id
          in: query
          description: External customer ID
          required: true
          explode: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletsPaginated'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  '/wallets/{id}':
    parameters:
      - name: id
        in: path
        description: Lago ID of the existing wallet
        required: true
        schema:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
    put:
      tags:
        - wallets
      summary: Update an existing wallet
      description: Update an existing wallet
      operationId: updateWallet
      requestBody:
        description: Update an existing wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletUpdateInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - wallets
      summary: Find wallet
      description: Return a wallet
      operationId: findWallet
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
    delete:
      tags:
        - wallets
      summary: Delete a wallet
      description: Delete a wallet
      operationId: destroyWallet
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '405':
          description: Not Allowed error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorNotAllowed'
  /wallet_transactions:
    post:
      tags:
        - wallets
      summary: Create a new wallet transaction
      description: Create a new wallet transaction
      operationId: createWalletTransaction
      requestBody:
        description: Wallet transaction payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletTransactionInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransactions'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
  '/wallets/{id}/wallet_transactions':
    get:
      tags:
        - wallets
      summary: Find wallet transactions
      description: Find all wallet transactions for certain wallet
      operationId: findAllWalletTransactions
      parameters:
        - name: id
          in: path
          description: Lago ID of the existing wallet
          required: true
          schema:
            type: string
            format: uuid
            example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
        - name: status
          in: query
          description: Status (pending or settled)
          required: false
          explode: true
          schema:
            type: string
            example: pending
        - name: transaction_type
          in: query
          description: Transaction Type (inbound or outbound)
          required: false
          explode: true
          schema:
            type: string
            example: inbound
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransactionsPaginated'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  /credit_notes:
    post:
      tags:
        - credit_notes
      summary: Create a new Credit note
      description: Create a new credit note
      operationId: createCreditNote
      requestBody:
        description: Credit note payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - credit_notes
      summary: Find Credit notes
      description: Find all credit notes in certain organisation
      operationId: findAllCreditNotes
      parameters:
        - $ref: '#/paths/~1fees/get/parameters/0'
        - $ref: '#/paths/~1fees/get/parameters/1'
        - name: external_customer_id
          in: query
          description: External customer ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNotes'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
  '/credit_notes/{id}':
    parameters:
      - name: id
        in: path
        description: Id of the existing credit note
        required: true
        schema:
          type: string
          example: '12345'
    put:
      tags:
        - credit_notes
      summary: Update an existing credit note
      description: Update an existing credit note
      operationId: updateCreditNote
      requestBody:
        description: Update an existing credit note
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteUpdateInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        '400':
          $ref: '#/paths/~1plans/post/responses/400'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '422':
          $ref: '#/paths/~1fees/get/responses/422'
    get:
      tags:
        - credit_notes
      summary: Find credit note
      description: Return a single credit note
      operationId: findCreditNote
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  '/credit_notes/{id}/download':
    post:
      tags:
        - credit_notes
      summary: Download an existing credit note
      parameters:
        - name: id
          in: path
          description: ID of the existing Lago Credit note
          required: true
          schema:
            type: string
            format: uuid
            example: 1a901a90-1a90-1a90-1a90-1a901a901a90
      description: Download an existing credit note
      operationId: downloadCreditNote
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
  '/credit_notes/{id}/void':
    put:
      tags:
        - credit_notes
      summary: Void existing credit note
      parameters:
        - name: id
          in: path
          description: ID of the existing Lago Credit note
          required: true
          schema:
            type: string
            format: uuid
            example: 1a901a90-1a90-1a90-1a90-1a901a901a90
      description: Void an existing credit note
      operationId: voidCreditNote
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        '401':
          $ref: '#/paths/~1fees/get/responses/401'
        '404':
          $ref: '#/paths/~1plans/post/responses/404'
        '405':
          $ref: '#/paths/~1wallets~1%7Bid%7D/delete/responses/405'
components:
  parameters:
    page:
      $ref: '#/paths/~1fees/get/parameters/0'
    per_page:
      $ref: '#/paths/~1fees/get/parameters/1'
  schemas:
    ApiErrorBadRequest:
      type: object
      required:
        - status
        - error
      properties:
        status:
          type: integer
          format: int32
          example: 400
        error:
          type: string
          example: Bad request
    ApiErrorForbidden:
      type: object
      required:
        - status
        - error
        - code
      properties:
        status:
          type: integer
          format: int32
          example: 403
        error:
          type: string
          example: Forbidden
        code:
          type: string
          example: feature_unavailable
    ApiErrorUnauthorized:
      type: object
      required:
        - status
        - error
      properties:
        status:
          type: integer
          format: int32
          example: 401
        error:
          type: string
          example: Unauthorized
    ApiErrorUnprocessableEntity:
      type: object
      required:
        - status
        - error
        - code
        - error_details
      properties:
        status:
          type: integer
          format: int32
          example: 422
        error:
          type: string
          example: Unprocessable entity
        code:
          type: string
          example: validation_errors
        error_details:
          type: object
    ApiErrorNotAllowed:
      type: object
      required:
        - status
        - error
        - code
      properties:
        status:
          type: integer
          format: int32
          example: 405
        error:
          type: string
          example: Method Not Allowed
        code:
          type: string
          example: not_allowed
    ApiErrorNotFound:
      type: object
      required:
        - status
        - error
        - code
      properties:
        status:
          type: integer
          format: int32
          example: 404
        error:
          type: string
          example: Not Found
        code:
          type: string
          example: object_not_found
    BillableMetric:
      type: object
      required:
        - billable_metric
      properties:
        billable_metric:
          $ref: '#/components/schemas/BillableMetricObject'
    BillableMetricObject:
      type: object
      required:
        - lago_id
        - name
        - code
        - aggregation_type
        - created_at
        - active_subscriptions_count
        - draft_invoices_count
        - plans_count
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
          description: Unique identifier of the billable metric created by Lago.
        name:
          type: string
          example: Storage
          description: Name of the billable metric.
        code:
          type: string
          example: storage
          description: Unique code used to identify the billable metric associated with the API request. This code associates each event with the correct metric.
        description:
          type: string
          example: GB of storage used in my application
          description: Internal description of the billable metric.
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
          description: Creation date of the billable metric.
        field_name:
          type: string
          example: gb
          description: Property of the billable metric used for aggregating usage data. This field is not required for `count_agg`.
          nullable: true
        aggregation_type:
          type: string
          description: 'Aggregation method used to compute usage for this billable metric. Possible values are `count_agg`, `sum_agg`, `max_agg` or `unique_count_agg`.'
          example: sum_agg
          enum:
            - count_agg
            - sum_agg
            - max_agg
            - unique_count_agg
        group:
          $ref: '#/components/schemas/BillableMetricGroup'
        active_subscriptions_count:
          type: integer
          example: 4
          description: Number of active subscriptions using this billable metric.
        draft_invoices_count:
          type: integer
          example: 10
          description: Number of draft invoices for which this billable metric is listed as an invoice item.
        plans_count:
          type: integer
          example: 4
          description: Number of plans using this billable metric.
    BillableMetricBaseInput:
      type: object
      properties:
        name:
          type: string
          example: Storage
          description: Name of the billable metric.
        code:
          type: string
          example: storage
          description: Unique code used to identify the billable metric associated with the API request. This code associates each event with the correct metric.
        description:
          type: string
          example: GB of storage used in my application
          description: Internal description of the billable metric.
          nullable: true
        field_name:
          type: string
          example: gb
          description: Property of the billable metric used for aggregating usage data. This field is not required for `count_agg`.
          nullable: true
        aggregation_type:
          type: string
          example: sum_agg
          description: 'Aggregation method used to compute usage for this billable metric. Possible values are `count_agg`, `sum_agg`, `max_agg` or `unique_count_agg`.'
          enum:
            - count_agg
            - sum_agg
            - max_agg
            - unique_count_agg
        group:
          $ref: '#/components/schemas/BillableMetricGroup'
    BillableMetricCreateInput:
      type: object
      required:
        - billable_metric
      properties:
        billable_metric:
          allOf:
            - $ref: '#/components/schemas/BillableMetricBaseInput'
            - required:
                - name
                - code
                - aggregation_type
    BillableMetricUpdateInput:
      type: object
      required:
        - billable_metric
      properties:
        billable_metric:
          $ref: '#/components/schemas/BillableMetricBaseInput'
    BillableMetricGroup:
      type: object
      description: 'Group with one or two dimensions, used to apply differentiated pricing based on additional properties of the billable metric.'
      required:
        - key
        - values
      properties:
        key:
          type: string
          description: Name of the event property used to group values.
          example: region
        values:
          type: array
          description: Array of strings or objects representing all possible values.
          example:
            - us-east-1
            - us-east-2
            - eu-west-1
          items:
            oneOf:
              - type: string
              - type: object
                description: Second dimension of group.
                required:
                  - key
                  - values
                properties:
                  key:
                    type: string
                    description: Name of the event property used to group values.
                    example: region
                  values:
                    type: array
                    description: Array of strings representing all possible values.
                    example:
                      - us-east-1
                      - us-east-2
                      - eu-west-1
                    items:
                      type: string
    BillableMetricsPaginated:
      type: object
      required:
        - billable_metrics
        - meta
      properties:
        billable_metrics:
          type: array
          items:
            $ref: '#/components/schemas/BillableMetricObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    Currency:
      type: string
      example: USD
      enum:
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BIF
        - BMD
        - BND
        - BOB
        - BRL
        - BSD
        - BWP
        - BYN
        - BZD
        - CAD
        - CDF
        - CHF
        - CLF
        - CLP
        - CNY
        - COP
        - CRC
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - ISK
        - JMD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KRW
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - STD
        - SZL
        - THB
        - TJS
        - TOP
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - UYU
        - UZS
        - VND
        - VUV
        - WST
        - XAF
        - XCD
        - XOF
        - XPF
        - YER
        - ZAR
        - ZMW
    Customer:
      type: object
      required:
        - customer
      properties:
        customer:
          $ref: '#/components/schemas/CustomerObject'
    CustomerBillingConfiguration:
      type: object
      description: 'Configuration specific to the payment provider, utilized for billing the customer. This object contains settings and parameters necessary for processing payments and invoicing the customer.'
      properties:
        invoice_grace_period:
          type: integer
          example: 3
          description: 'The grace period, expressed in days, for the invoice. This period refers to the additional time granted to the customer beyond the invoice due date to adjust usage and line items'
        payment_provider:
          type: string
          example: stripe
          description: |-
            The payment provider utilized to initiate payments for invoices issued by Lago.
            Accepted values: `stripe`, `adyen`, `gocardless` or null. This field is required if you intend to assign a `provider_customer_id`.
          enum:
            - stripe
            - adyen
            - gocardless
        provider_customer_id:
          type: string
          example: cus_12345
          description: 'The customer ID within the payment provider''s system. If this field is not provided, Lago has the option to create a new customer record within the payment provider''s system on behalf of the customer'
        sync:
          type: boolean
          example: true
          description: 'Set this field to `true` if you want to create the customer in the payment provider synchronously with the customer creation process in Lago. This option is applicable only when the `provider_customer_id` is `null` and the customer is automatically created in the payment provider through Lago. By default, the value is set to `false`'
        sync_with_provider:
          type: boolean
          example: true
          description: 'Set this field to `true` if you want to create a customer record in the payment provider''s system. This option is applicable only when the `provider_customer_id` is null and the `sync_with_provider` field is set to `true`. By default, the value is set to `false`'
        document_locale:
          type: string
          example: fr
          description: 'The document locale, specified in the ISO 639-1 format. This field represents the language or locale used for the documents issued by Lago'
    CustomerCreateInput:
      type: object
      required:
        - customer
      properties:
        customer:
          type: object
          required:
            - external_id
          properties:
            external_id:
              type: string
              example: 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
              description: The customer external unique identifier (provided by your own application)
            address_line1:
              type: string
              example: 5230 Penfield Ave
              description: The first line of the billing address
              nullable: true
            address_line2:
              type: string
              example: ''
              description: The second line of the billing address
              nullable: true
            city:
              type: string
              example: Woodland Hills
              description: The city of the customer's billing address
              nullable: true
            country:
              type: string
              example: US
              description: Country code of the customer's billing address. Format must be ISO 3166 (alpha-2)
              nullable: true
            currency:
              allOf:
                - $ref: '#/components/schemas/Currency'
                - description: Currency of the customer. Format must be ISO 4217
                  nullable: true
            email:
              type: string
              format: email
              example: dinesh@piedpiper.test
              description: The email of the customer
              nullable: true
            legal_name:
              type: string
              example: Coleman-Blair
              description: The legal company name of the customer
              nullable: true
            legal_number:
              type: string
              example: 49-008-2965
              description: The legal company number of the customer
              nullable: true
            logo_url:
              type: string
              example: 'http://hooli.com/logo.png'
              description: The logo URL of the customer
              nullable: true
            name:
              type: string
              example: Gavin Belson
              description: The full name of the customer
              nullable: true
            phone:
              type: string
              example: 1-171-883-3711 x245
              description: The phone number of the customer
              nullable: true
            state:
              type: string
              example: CA
              description: The state of the customer's billing address
              nullable: true
            tax_identification_number:
              type: string
              example: EU123456789
              description: The tax identification number of the customer
              nullable: true
            timezone:
              allOf:
                - $ref: '#/components/schemas/Timezone'
                - description: 'The customer''s timezone, used for billing purposes in their local time. Overrides the organization''s timezone'
                  nullable: true
            url:
              type: string
              example: 'http://hooli.com'
              description: The custom website URL of the customer
              nullable: true
            zipcode:
              type: string
              example: '91364'
              description: The zipcode of the customer's billing address
              nullable: true
            billing_configuration:
              $ref: '#/components/schemas/CustomerBillingConfiguration'
            metadata:
              type: array
              description: Set of key-value pairs that you can attach to a customer. This can be useful for storing additional information about the customer in a structured format
              items:
                type: object
                required:
                  - key
                  - value
                  - display_in_invoice
                properties:
                  id:
                    type: string
                    format: uuid
                    example: 1a901a90-1a90-1a90-1a90-1a901a901a90
                    description: 'Identifier for the metadata object, only required when updating a key-value pair'
                  key:
                    type: string
                    example: Purchase Order
                    description: The metadata object key
                  value:
                    type: string
                    example: '123456789'
                    description: The metadata object value
                  display_in_invoice:
                    type: boolean
                    example: true
                    description: 'Determines whether the item or information should be displayed in the invoice. If set to true, the item or information will be included and visible in the generated invoice. If set to false, the item or information will be excluded and not displayed in the invoice.'
    CustomerMetadata:
      type: object
      description: Set of key-value pairs that you can attach to a customer. This can be useful for storing additional information about the customer in a structured format
      required:
        - lago_id
        - key
        - value
        - display_in_invoice
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
          description: A unique identifier for the customer metadata object in the Lago application. Can be used to update a key-value pair
        key:
          type: string
          example: Purchase Order
          description: The metadata object key
        value:
          type: string
          example: '123456789'
          description: The metadata object value
        display_in_invoice:
          type: boolean
          example: true
          description: 'Determines whether the item or information should be displayed in the invoice. If set to true, the item or information will be included and visible in the generated invoice. If set to false, the item or information will be excluded and not displayed in the invoice.'
        created_at:
          type: string
          format: date-time
          example: '2022-04-29T08:59:51Z'
          description: 'The date of the metadata object creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). The creation_date provides a standardized and internationally recognized timestamp for when the metadata object was created'
    CustomerObject:
      type: object
      required:
        - lago_id
        - sequential_id
        - slug
        - external_id
        - applicable_timezone
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
          description: Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer's record within the Lago system
        sequential_id:
          type: integer
          example: 1
          description: 'The unique identifier assigned to the customer within the organization''s scope. This identifier is used to track and reference the customer''s order of creation within the organization''s system. It ensures that each customer has a distinct `sequential_id`` associated with them, allowing for easy identification and sorting based on the order of creation'
        slug:
          type: string
          example: LAG-1234-001
          description: 'A concise and unique identifier for the customer, formed by combining the Organization''s `name`, `id`, and customer''s `sequential_id`'
        external_id:
          type: string
          example: 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
          description: The customer external unique identifier (provided by your own application)
        address_line1:
          type: string
          example: 5230 Penfield Ave
          description: The first line of the billing address
          nullable: true
        address_line2:
          type: string
          example: null
          description: The second line of the billing address
          nullable: true
        applicable_timezone:
          allOf:
            - $ref: '#/components/schemas/Timezone'
            - description: 'The customer''s applicable timezone, used for billing purposes in their local time.'
        city:
          type: string
          example: Woodland Hills
          description: The city of the customer's billing address
          nullable: true
        country:
          type: string
          example: US
          description: Country code of the customer's billing address. Format must be ISO 3166 (alpha-2)
          nullable: true
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
            - example: USD
              description: Currency of the customer. Format must be ISO 4217
              nullable: true
        email:
          type: string
          format: email
          example: dinesh@piedpiper.test
          description: The email of the customer
          nullable: true
        legal_name:
          type: string
          example: Coleman-Blair
          description: The legal company name of the customer
          nullable: true
        legal_number:
          type: string
          example: 49-008-2965
          description: The legal company number of the customer
          nullable: true
        logo_url:
          type: string
          example: 'http://hooli.com/logo.png'
          description: The logo URL of the customer
          nullable: true
        name:
          type: string
          example: Gavin Belson
          description: The full name of the customer
          nullable: true
        state:
          type: string
          example: CA
          description: The state of the customer's billing address
          nullable: true
        tax_identification_number:
          type: string
          example: EU123456789
          description: The tax identification number of the customer
          nullable: true
        timezone:
          allOf:
            - $ref: '#/components/schemas/Timezone'
            - description: 'The customer''s timezone, used for billing purposes in their local time. Overrides the organization''s timezone'
              nullable: true
        url:
          type: string
          example: 'http://hooli.com'
          description: The custom website URL of the customer
          nullable: true
        zipcode:
          type: string
          example: '91364'
          description: The zipcode of the customer's billing address
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2022-04-29T08:59:51Z'
          description: 'The date of the customer creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). The creation_date provides a standardized and internationally recognized timestamp for when the customer object was created'
        billing_configuration:
          $ref: '#/components/schemas/CustomerBillingConfiguration'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/CustomerMetadata'
    CustomersPaginated:
      type: object
      required:
        - customers
        - meta
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    GroupObject:
      type: object
      required:
        - lago_id
        - key
        - value
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
          description: Unique identifier of a specific group associated with the billable metric.
        key:
          type: string
          example: region
          description: Key of a specific group associated with the billable metric.
        value:
          type: string
          example: us-east-1
          description: One of the values for a specific group associated with the billable metric.
    GroupsPaginated:
      type: object
      required:
        - groups
        - meta
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    PaginationMeta:
      type: object
      required:
        - current_page
        - total_pages
        - total_count
      properties:
        current_page:
          type: integer
          description: Current page.
          example: 2
        next_page:
          type: integer
          description: Next page.
          example: 3
          nullable: true
        prev_page:
          type: integer
          description: Previous page.
          example: 1
          nullable: true
        total_pages:
          type: integer
          description: Total number of pages.
          example: 4
        total_count:
          type: integer
          description: Total number of records.
          example: 70
    Subscription:
      type: object
      required:
        - subscription
      properties:
        subscription:
          $ref: '#/components/schemas/SubscriptionObject'
    SubscriptionCreateInput:
      type: object
      required:
        - subscription
      properties:
        subscription:
          type: object
          required:
            - external_customer_id
            - plan_code
            - external_id
          properties:
            external_customer_id:
              type: string
              example: 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
              description: The customer external unique identifier (provided by your own application)
            plan_code:
              type: string
              example: premium
              description: The unique code representing the plan to be attached to the customer. This code must correspond to the `code` property of one of the active plans.
            name:
              type: string
              example: Repository A
              description: 'The display name of the subscription on an invoice. This field allows for customization of the subscription''s name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.'
            external_id:
              type: string
              example: my_sub_1234567890
              description: 'The unique external identifier for the subscription. This identifier serves as an idempotency key, ensuring that each subscription is unique.'
            billing_time:
              type: string
              description: 'The billing time for the subscription, which can be set as either `anniversary` or `calendar`. If not explicitly provided, it will default to `calendar`. The billing time determines the timing of recurring billing cycles for the subscription. By specifying `anniversary`, the billing cycle will be based on the specific date the subscription started (billed fully), while `calendar` sets the billing cycle at the first day of the week/month/year (billed with proration).'
              example: anniversary
              enum:
                - calendar
                - anniversary
            subscription_at:
              type: string
              format: date-time
              example: '2022-08-08T00:00:00Z'
              description: 'The start date for the subscription, allowing for the creation of subscriptions that can begin in the past or future. Please note that it cannot be used to update the start date of a pending subscription or schedule an upgrade/downgrade. The start_date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).'
    SubscriptionUpdateInput:
      type: object
      required:
        - subscription
      properties:
        subscription:
          type: object
          properties:
            name:
              type: string
              example: Repository B
              nullable: true
              description: 'The display name of the subscription on an invoice. This field allows for customization of the subscription''s name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.'
            subscription_at:
              type: string
              format: date-time
              example: '2022-08-08T00:00:00Z'
              description: The start date and time of the subscription. This field can only be modified for pending subscriptions that have not yet started. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
    SubscriptionObject:
      type: object
      required:
        - lago_id
        - lago_customer_id
        - billing_time
        - external_customer_id
        - created_at
        - subscription_at
        - plan_code
        - external_id
        - status
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
          description: Unique identifier assigned to the subscription within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the subscription’s record within the Lago system
        external_id:
          type: string
          example: 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
          description: The subscription external unique identifier (provided by your own application).
        lago_customer_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
          description: Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer's record within the Lago system
        external_customer_id:
          type: string
          example: 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
          description: The customer external unique identifier (provided by your own application).
        billing_time:
          type: string
          description: 'The billing time for the subscription, which can be set as either `anniversary` or `calendar`. If not explicitly provided, it will default to `calendar`. The billing time determines the timing of recurring billing cycles for the subscription. By specifying `anniversary`, the billing cycle will be based on the specific date the subscription started (billed fully), while `calendar` sets the billing cycle at the first day of the week/month/year (billed with proration).'
          example: anniversary
          enum:
            - calendar
            - anniversary
        name:
          type: string
          example: Repository A
          description: 'The display name of the subscription on an invoice. This field allows for customization of the subscription''s name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.'
          nullable: true
        plan_code:
          type: string
          example: premium
          description: The unique code representing the plan to be attached to the customer. This code must correspond to the `code` property of one of the active plans.
        status:
          type: string
          description: |-
            The status of the subscription, which can have the following values:
            - `pending`: a previous subscription has been downgraded, and the current one is awaiting automatic activation at the end of the billing period.
            - `active`: the subscription is currently active and applied to the customer.
            - `terminated`: the subscription is no longer active.
            - `canceled`: the subscription has been stopped before its activation. This can occur when two consecutive downgrades have been applied to a customer or when a subscription with a pending status is terminated.
          example: active
          enum:
            - active
            - pending
            - terminated
            - canceled
        created_at:
          type: string
          format: date-time
          example: '2022-08-08T00:00:00Z'
          description: 'The creation date of the subscription, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). This date provides a timestamp indicating when the subscription was initially created.'
        canceled_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
          description: The cancellation date of the subscription. This field is not null when the subscription is `canceled`. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
          nullable: true
        started_at:
          type: string
          format: date-time
          example: '2022-08-08T00:00:00Z'
          description: The effective start date of the subscription. This field can be null if the subscription is `pending` or `canceled`. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
          nullable: true
        subscription_at:
          type: string
          format: date-time
          example: '2022-08-08T00:00:00Z'
          description: The anniversary date and time of the initial subscription. This date serves as the basis for billing subscriptions with `anniversary` billing time. The `anniversary_date` should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
        terminated_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
          description: The termination date of the subscription. This field is not null when the subscription is `terminated`. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC)
          nullable: true
        previous_plan_code:
          type: string
          example: null
          description: The code identifying the previous plan associated with this subscription.
          nullable: true
        next_plan_code:
          type: string
          example: null
          description: The code identifying the next plan in the case of a downgrade.
          nullable: true
        downgrade_plan_date:
          type: string
          format: date-time
          example: null
          description: 'The date when the plan will be downgraded, represented in ISO 8601 date format.'
          nullable: true
    SubscriptionsPaginated:
      type: object
      required:
        - subscriptions
        - meta
      properties:
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    Timezone:
      type: string
      example: America/Los_Angeles
      enum:
        - UTC
        - Africa/Algiers
        - Africa/Cairo
        - Africa/Casablanca
        - Africa/Harare
        - Africa/Johannesburg
        - Africa/Monrovia
        - Africa/Nairobi
        - America/Argentina/Buenos_Aires
        - America/Bogota
        - America/Caracas
        - America/Chicago
        - America/Chihuahua
        - America/Denver
        - America/Godthab
        - America/Guatemala
        - America/Guyana
        - America/Halifax
        - America/Indiana/Indianapolis
        - America/Juneau
        - America/La_Paz
        - America/Lima
        - America/Los_Angeles
        - America/Mazatlan
        - America/Mexico_City
        - America/Monterrey
        - America/Montevideo
        - America/New_York
        - America/Phoenix
        - America/Puerto_Rico
        - America/Regina
        - America/Santiago
        - America/Sao_Paulo
        - America/St_Johns
        - America/Tijuana
        - Asia/Almaty
        - Asia/Baghdad
        - Asia/Baku
        - Asia/Bangkok
        - Asia/Chongqing
        - Asia/Colombo
        - Asia/Dhaka
        - Asia/Hong_Kong
        - Asia/Irkutsk
        - Asia/Jakarta
        - Asia/Jerusalem
        - Asia/Kabul
        - Asia/Kamchatka
        - Asia/Karachi
        - Asia/Kathmandu
        - Asia/Kolkata
        - Asia/Krasnoyarsk
        - Asia/Kuala_Lumpur
        - Asia/Kuwait
        - Asia/Magadan
        - Asia/Muscat
        - Asia/Novosibirsk
        - Asia/Rangoon
        - Asia/Riyadh
        - Asia/Seoul
        - Asia/Shanghai
        - Asia/Singapore
        - Asia/Srednekolymsk
        - Asia/Taipei
        - Asia/Tashkent
        - Asia/Tbilisi
        - Asia/Tehran
        - Asia/Tokyo
        - Asia/Ulaanbaatar
        - Asia/Urumqi
        - Asia/Vladivostok
        - Asia/Yakutsk
        - Asia/Yekaterinburg
        - Asia/Yerevan
        - Atlantic/Azores
        - Atlantic/Cape_Verde
        - Atlantic/South_Georgia
        - Australia/Adelaide
        - Australia/Brisbane
        - Australia/Darwin
        - Australia/Hobart
        - Australia/Melbourne
        - Australia/Perth
        - Australia/Sydney
        - Europe/Amsterdam
        - Europe/Athens
        - Europe/Belgrade
        - Europe/Berlin
        - Europe/Bratislava
        - Europe/Brussels
        - Europe/Bucharest
        - Europe/Budapest
        - Europe/Copenhagen
        - Europe/Dublin
        - Europe/Helsinki
        - Europe/Istanbul
        - Europe/Kaliningrad
        - Europe/Kiev
        - Europe/Lisbon
        - Europe/Ljubljana
        - Europe/London
        - Europe/Madrid
        - Europe/Minsk
        - Europe/Moscow
        - Europe/Paris
        - Europe/Prague
        - Europe/Riga
        - Europe/Rome
        - Europe/Samara
        - Europe/Sarajevo
        - Europe/Skopje
        - Europe/Sofia
        - Europe/Stockholm
        - Europe/Tallinn
        - Europe/Vienna
        - Europe/Vilnius
        - Europe/Volgograd
        - Europe/Warsaw
        - Europe/Zagreb
        - Europe/Zurich
        - GMT+12
        - Pacific/Apia
        - Pacific/Auckland
        - Pacific/Chatham
        - Pacific/Fakaofo
        - Pacific/Fiji
        - Pacific/Guadalcanal
        - Pacific/Guam
        - Pacific/Honolulu
        - Pacific/Majuro
        - Pacific/Midway
        - Pacific/Noumea
        - Pacific/Pago_Pago
        - Pacific/Port_Moresby
        - Pacific/Tongatapu
    AddOnObject:
      type: object
      required:
        - lago_id
        - name
        - code
        - amount_cents
        - amount_currency
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        name:
          type: string
          example: example name
        code:
          type: string
          example: example_code
        description:
          type: string
          example: description
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: EUR
    AddOn:
      type: object
      required:
        - add_on
      properties:
        add_on:
          $ref: '#/components/schemas/AddOnObject'
    AddOnsPaginated:
      type: object
      required:
        - add_ons
        - meta
      properties:
        add_ons:
          type: array
          items:
            $ref: '#/components/schemas/AddOnObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    AddOnInput:
      type: object
      required:
        - add_on
      properties:
        add_on:
          type: object
          properties:
            name:
              type: string
              example: example name
            code:
              type: string
              example: example_code
            description:
              type: string
              example: description
            amount_cents:
              type: integer
              example: 1200
            amount_currency:
              type: string
              example: EUR
    AppliedAddOnObject:
      type: object
      required:
        - lago_id
        - lago_add_on_id
        - add_on_code
        - external_customer_id
        - lago_customer_id
        - amount_cents
        - amount_currency
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        lago_add_on_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        add_on_code:
          type: string
          example: code
        lago_customer_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        external_customer_id:
          type: string
          example: '1234567'
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: EUR
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
    AppliedAddOn:
      type: object
      required:
        - applied_add_on
      properties:
        applied_add_on:
          $ref: '#/components/schemas/AppliedAddOnObject'
    AppliedAddOnInput:
      type: object
      required:
        - applied_add_on
      properties:
        applied_add_on:
          type: object
          required:
            - external_customer_id
            - add_on_code
          properties:
            external_customer_id:
              type: string
              example: '1234567'
            add_on_code:
              type: string
              example: code
            amount_cents:
              type: integer
              example: 1200
            amount_currency:
              type: string
              example: EUR
    CouponObject:
      type: object
      required:
        - lago_id
        - name
        - code
        - expiration
        - coupon_type
        - frequency
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        name:
          type: string
          example: coupon1
        code:
          type: string
          example: example_code
        coupon_type:
          type: string
          description: Coupon type
          enum:
            - fixed_amount
            - percentage
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: EUR
        reusable:
          type: boolean
          example: true
        limited_plans:
          type: boolean
          example: true
        plan_codes:
          type: array
          items:
            type: string
            example: code1
        limited_billable_metrics:
          type: boolean
          example: true
        billable_metric_codes:
          type: array
          items:
            type: string
            example: code2
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        percentage_rate:
          type: number
          example: 25
        frequency:
          type: string
          description: Frequency type
          enum:
            - once
            - recurring
        frequency_duration:
          type: integer
          example: 3
        expiration_at:
          type: string
          format: date-time
          example: '2022-09-14T23:59:59Z'
        expiration:
          type: string
          description: Expiration type
          enum:
            - no_expiration
            - time_limit
    Coupon:
      type: object
      required:
        - coupon
      properties:
        coupon:
          $ref: '#/components/schemas/CouponObject'
    CouponsPaginated:
      type: object
      required:
        - coupons
        - meta
      properties:
        coupons:
          type: array
          items:
            $ref: '#/components/schemas/CouponObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    CouponInput:
      type: object
      required:
        - coupon
      properties:
        coupon:
          type: object
          properties:
            name:
              type: string
              example: coupon1
            code:
              type: string
              example: example_code
            coupon_type:
              type: string
              description: Coupon type
              enum:
                - fixed_amount
                - percentage
            amount_cents:
              type: integer
              example: 1200
            amount_currency:
              type: string
              example: EUR
            reusable:
              type: boolean
              example: true
            percentage_rate:
              type: number
              example: 25
            frequency:
              type: string
              description: Frequency type
              enum:
                - once
                - recurring
            frequency_duration:
              type: integer
              example: 3
            expiration_at:
              type: string
              format: date-time
              example: '2022-09-14T23:59:59Z'
            expiration:
              type: string
              description: Expiration type
              enum:
                - no_expiration
                - time_limit
            applies_to:
              type: object
              properties:
                plan_codes:
                  type: array
                  items:
                    type: string
                    example: code1
                billable_metric_codes:
                  type: array
                  items:
                    type: string
                    example: code2
    AppliedCouponObject:
      type: object
      required:
        - lago_id
        - lago_coupon_id
        - coupon_code
        - external_customer_id
        - lago_customer_id
        - status
        - amount_cents
        - amount_currency
        - frequency
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        lago_coupon_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        coupon_code:
          type: string
          example: example_code
        lago_customer_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        external_customer_id:
          type: string
          example: '123456'
        status:
          type: string
          description: Status
          enum:
            - active
            - terminated
        amount_cents:
          type: integer
          example: 1200
        amount_cents_remaining:
          type: integer
          example: 800
        amount_currency:
          type: string
          example: EUR
        percentage_rate:
          type: number
          example: 25
        frequency:
          type: string
          description: Frequency type
          enum:
            - once
            - recurring
        frequency_duration:
          type: integer
          example: 3
        frequency_duration_remaining:
          type: integer
          example: 2
        expiration_at:
          type: string
          format: date-time
          example: '2022-09-14T23:59:59Z'
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        terminated_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
    AppliedCouponObjectExtended:
      allOf:
        - $ref: '#/components/schemas/AppliedCouponObject'
        - type: object
          required:
            - credits
          properties:
            credits:
              type: array
              items:
                $ref: '#/components/schemas/CreditObject'
    AppliedCoupon:
      type: object
      required:
        - applied_coupon
      properties:
        applied_coupon:
          $ref: '#/components/schemas/AppliedCouponObject'
    AppliedCouponsPaginated:
      type: object
      required:
        - applied_coupons
        - meta
      properties:
        applied_coupons:
          type: array
          items:
            $ref: '#/components/schemas/AppliedCouponObjectExtended'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    AppliedCouponInput:
      type: object
      required:
        - applied_coupon
      properties:
        applied_coupon:
          type: object
          required:
            - external_customer_id
            - coupon_code
          properties:
            external_customer_id:
              type: string
              example: '123456'
            coupon_code:
              type: string
              example: example_code
            frequency:
              type: string
              description: Frequency type
              enum:
                - once
                - recurring
            frequency_duration:
              type: integer
              example: 3
            amount_cents:
              type: integer
              example: 1200
            amount_currency:
              type: string
              example: EUR
            percentage_rate:
              type: number
              example: 25
    BillingConfigurationOrganization:
      type: object
      properties:
        invoice_footer:
          type: string
          example: text
        invoice_grace_period:
          type: integer
          example: 5
        document_locale:
          type: string
          example: fr
        vat_rate:
          type: number
          example: 25
    OrganizationObject:
      type: object
      required:
        - name
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        name:
          type: string
          example: example name
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        webhook_url:
          type: string
          example: 'https://example.com'
        country:
          type: string
          example: CZ
        address_line1:
          type: string
          example: address1
        address_line2:
          type: string
          example: address2
        state:
          type: string
          example: state1
        zipcode:
          type: string
          example: '10000'
        email:
          type: string
          format: email
          example: example@example.com
        city:
          type: string
          example: City
        legal_name:
          type: string
          example: name1
        legal_number:
          type: string
          example: '10000'
        tax_identification_number:
          type: string
          example: EU123456789
        timezone:
          type: string
          example: UTC
        billing_configuration:
          $ref: '#/components/schemas/BillingConfigurationOrganization'
    Organization:
      type: object
      required:
        - organization
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationObject'
    OrganizationInput:
      type: object
      required:
        - organization
      properties:
        organization:
          type: object
          properties:
            webhook_url:
              type: string
              example: 'https://example.com'
            country:
              type: string
              example: CZ
            address_line1:
              type: string
              example: address1
            address_line2:
              type: string
              example: address2
            state:
              type: string
              example: state1
            zipcode:
              type: string
              example: '10000'
            email:
              type: string
              format: email
              example: example@example.com
            city:
              type: string
              example: City
            legal_name:
              type: string
              example: name1
            legal_number:
              type: string
              example: '10000'
            tax_identification_number:
              type: string
              example: EU123456789
            timezone:
              type: string
              example: Europe/Paris
            email_settings:
              type: array
              items:
                type: string
                enum:
                  - invoice.finalized
                  - credit_note.created
            billing_configuration:
              $ref: '#/components/schemas/BillingConfigurationOrganization'
    ChargeUsageObject:
      type: object
      required:
        - units
        - amount_cents
        - amount_currency
        - charge
        - billable_metric
        - groups
      properties:
        units:
          type: string
          example: '3.0'
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: EUR
        charge:
          type: object
          properties:
            lago_id:
              type: string
              format: uuid
              example: 1a901a90-1a90-1a90-1a90-1a901a901a90
            charge_model:
              type: string
              description: Charge model type
              enum:
                - standard
                - graduated
                - package
                - percentage
                - volume
            pay_in_advance:
              type: boolean
            min_amount_cents:
              type: integer
              example: 1200
        billable_metric:
          type: object
          properties:
            lago_id:
              type: string
              format: uuid
              example: 1a901a90-1a90-1a90-1a90-1a901a901a90
            name:
              type: string
              example: Example name
            code:
              type: string
              example: code
            aggregation_type:
              type: string
              description: Aggregation type
              enum:
                - count_agg
                - sum_agg
                - max_agg
                - unique_count_agg
        groups:
          type: array
          items:
            type: object
            properties:
              lago_id:
                type: string
                format: uuid
                example: 1a901a90-1a90-1a90-1a90-1a901a901a90
              key:
                type: string
                example: key
              value:
                type: string
                example: value
              units:
                type: string
                example: '3.5'
              amount_cents:
                type: integer
                example: 1200
    CustomerUsageObject:
      type: object
      required:
        - from_datetime
        - to_datetime
        - issuing_date
        - amount_cents
        - amount_currency
        - total_amount_cents
        - total_amount_currency
        - vat_amount_cents
        - vat_amount_currency
        - charges_usage
      properties:
        from_datetime:
          type: string
          format: date-time
          example: '2022-09-14T00:00:00Z'
        to_datetime:
          type: string
          format: date-time
          example: '2022-09-14T00:00:00Z'
        issuing_date:
          type: string
          format: date-time
          example: '2022-09-15T00:00:00Z'
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: EUR
        total_amount_cents:
          type: integer
          example: 1400
        total_amount_currency:
          type: string
          example: EUR
        vat_amount_cents:
          type: integer
          example: 200
        vat_amount_currency:
          type: string
          example: EUR
        charges_usage:
          type: array
          items:
            $ref: '#/components/schemas/ChargeUsageObject'
    CustomerUsage:
      type: object
      required:
        - customer_usage
      properties:
        customer_usage:
          $ref: '#/components/schemas/CustomerUsageObject'
    EventObject:
      type: object
      required:
        - lago_id
        - transaction_id
        - lago_customer_id
        - external_customer_id
        - code
        - timestamp
        - lago_subscription_id
        - external_subscription_id
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        transaction_id:
          type: string
          example: '987654321'
        lago_customer_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        external_customer_id:
          type: string
          example: '123456'
        code:
          type: string
          example: code
        timestamp:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        properties:
          type: object
        lago_subscription_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        external_subscription_id:
          type: string
          example: '123456'
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
    Event:
      type: object
      required:
        - event
      properties:
        event:
          $ref: '#/components/schemas/EventObject'
    EventInput:
      type: object
      required:
        - event
      properties:
        event:
          type: object
          required:
            - transaction_id
            - code
          properties:
            transaction_id:
              type: string
              example: '123456'
            external_customer_id:
              type: string
              example: '654321'
            code:
              type: string
              example: code
            timestamp:
              type: integer
              example: 1669823754
            external_subscription_id:
              type: string
              example: '123456'
            properties:
              type: object
    EventEstimateFeesInput:
      type: object
      required:
        - event
      properties:
        event:
          type: object
          required:
            - code
          properties:
            code:
              type: string
              example: code
            external_customer_id:
              type: string
              example: '654321'
            external_subscription_id:
              type: string
              example: '123456'
            properties:
              type: object
    BatchEventInput:
      type: object
      required:
        - event
      properties:
        event:
          type: object
          required:
            - transaction_id
            - external_subscription_ids
            - code
          properties:
            transaction_id:
              type: string
              example: '123456'
            external_customer_id:
              type: string
              example: '654321'
            code:
              type: string
              example: code
            timestamp:
              type: integer
              example: 1669823754
            external_subscription_ids:
              type: array
              items:
                type: string
            properties:
              type: object
    Fees:
      type: object
      required:
        - fees
      properties:
        fees:
          type: array
          items:
            $ref: '#/components/schemas/FeeObject'
    FeesPaginated:
      allOf:
        - $ref: '#/components/schemas/Fees'
        - type: object
          required:
            - meta
          properties:
            meta:
              $ref: '#/components/schemas/PaginationMeta'
    FeeUpdateInput:
      type: object
      required:
        - invoice
      properties:
        invoice:
          type: object
          required:
            - payment_status
          properties:
            payment_status:
              type: string
              description: Status
              enum:
                - pending
                - succeeded
                - failed
                - refunded
    GroupPropertiesObject:
      type: object
      required:
        - group_id
        - values
      properties:
        group_id:
          type: string
          example: '123456'
        values:
          type: object
    ChargeObject:
      type: object
      required:
        - lago_id
        - lago_billable_metric_id
        - billable_metric_code
        - created_at
        - charge_model
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        lago_billable_metric_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        billable_metric_code:
          type: string
          example: bm_code
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        charge_model:
          type: string
          description: Charge model type
          enum:
            - standard
            - graduated
            - package
            - percentage
            - volume
        pay_in_advance:
          type: boolean
          example: true
        invoiceable:
          type: boolean
          example: true
        min_amount_cents:
          type: integer
          example: 1200
        properties:
          type: object
        group_properties:
          type: array
          items:
            $ref: '#/components/schemas/GroupPropertiesObject'
    PlanObject:
      type: object
      required:
        - lago_id
        - name
        - created_at
        - code
        - interval
        - amount_cents
        - amount_currency
        - active_subscriptions_count
        - draft_invoices_count
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        name:
          type: string
          example: example name
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        code:
          type: string
          example: example_code
        interval:
          type: string
          description: Plan interval
          enum:
            - weekly
            - monthly
            - yearly
        description:
          type: string
          example: description
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: EUR
        trial_period:
          type: number
          example: 2
        pay_in_advance:
          type: boolean
          example: true
        bill_charges_monthly:
          type: boolean
          example: false
        active_subscriptions_count:
          type: integer
          example: 2
        draft_invoices_count:
          type: integer
          example: 2
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeObject'
    Plan:
      type: object
      required:
        - plan
      properties:
        plan:
          $ref: '#/components/schemas/PlanObject'
    PlansPaginated:
      type: object
      required:
        - plans
        - meta
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/PlanObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    PlanInput:
      type: object
      required:
        - plan
      properties:
        plan:
          type: object
          properties:
            name:
              type: string
              example: example name
            code:
              type: string
              example: example_code
            interval:
              type: string
              description: Plan interval
              enum:
                - weekly
                - monthly
                - yearly
            description:
              type: string
              example: description
            amount_cents:
              type: integer
              example: 1200
            amount_currency:
              type: string
              example: EUR
            trial_period:
              type: number
              example: 2
            pay_in_advance:
              type: boolean
              example: true
            bill_charges_monthly:
              type: boolean
              example: false
            charges:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: 1a901a90-1a90-1a90-1a90-1a901a901a90
                  billable_metric_id:
                    type: string
                    format: uuid
                    example: 1a901a90-1a90-1a90-1a90-1a901a901a90
                  charge_model:
                    type: string
                    description: Charge model type
                    enum:
                      - standard
                      - graduated
                      - package
                      - percentage
                      - volume
                  pay_in_advance:
                    type: boolean
                  invoiceable:
                    type: boolean
                  min_amount_cents:
                    type: integer
                  properties:
                    type: object
                  group_properties:
                    type: array
                    items:
                      type: object
                      required:
                        - group_id
                        - values
                      properties:
                        group_id:
                          type: string
                          example: '123456'
                        values:
                          type: object
    CreditObject:
      type: object
      required:
        - lago_id
        - item
        - amount_cents
        - amount_currency
        - invoice
        - before_vat
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: EUR
        before_vat:
          type: boolean
          example: false
        item:
          type: object
          required:
            - lago_id
            - type
            - code
            - name
          properties:
            lago_id:
              type: string
              format: uuid
              example: 1a901a90-1a90-1a90-1a90-1a901a901a90
            type:
              type: string
              example: coupon
            code:
              type: string
              example: code
            name:
              type: string
              example: name
        invoice:
          type: object
          required:
            - lago_id
            - payment_status
          properties:
            lago_id:
              type: string
              format: uuid
              example: 1a901a90-1a90-1a90-1a90-1a901a901a90
            payment_status:
              type: string
              enum:
                - pending
                - succeeded
                - failed
    FeeObject:
      type: object
      required:
        - lago_id
        - item
        - amount_cents
        - amount_currency
        - vat_amount_cents
        - vat_amount_currency
        - units
        - payment_status
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        lago_group_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        lago_invoice_id:
          type: string
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
          format: uuid
        lago_true_up_fee_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        lago_true_up_parent_fee_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        external_subscription_id:
          type: string
          example: '54321'
        amount_cents:
          type: integer
          example: 1000
        amount_currency:
          type: string
          example: EUR
        vat_amount_cents:
          type: integer
          example: 200
        vat_amount_currency:
          type: string
          example: EUR
        units:
          type: string
          example: '2.5'
        total_amount_cents:
          type: integer
          example: 1200
        total_amount_currency:
          type: string
          example: EUR
        events_count:
          type: integer
          example: 5
        pay_in_advance:
          type: boolean
          example: true
        invoiceable:
          type: boolean
          example: true
        from_date:
          type: string
          format: date-time
          example: '2022-08-08T00:00:00Z'
        to_date:
          type: string
          format: date-time
          example: '2022-08-08T00:00:00Z'
        payment_status:
          type: string
          enum:
            - pending
            - succeeded
            - failed
            - refunded
        created_at:
          type: string
          example: '2022-09-14T16:35:31Z'
          format: date-time
        succeeded_at:
          type: string
          example: '2022-09-14T16:35:31Z'
          format: date-time
        failed_at:
          type: string
          example: '2022-09-14T16:35:31Z'
          format: date-time
        refunded_at:
          type: string
          example: '2022-09-14T16:35:31Z'
          format: date-time
        item:
          type: object
          required:
            - type
            - code
            - name
            - lago_item_id
            - item_type
          properties:
            type:
              type: string
              description: Billing time
              enum:
                - charge
                - add_on
                - subscription
                - credit
            code:
              type: string
              example: code
            name:
              type: string
              example: name
            lago_item_id:
              type: string
              example: 1a901a90-1a90-1a90-1a90-1a901a901a90
              format: uuid
            item_type:
              type: string
              enum:
                - AddOn
                - BillableMetric
                - Subscription
                - WalletTransaction
    InvoiceMetadataObject:
      type: object
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        key:
          type: string
          example: name
        value:
          type: string
          example: John
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
    InvoiceObject:
      type: object
      required:
        - lago_id
        - sequential_id
        - number
        - issuing_date
        - invoice_type
        - status
        - payment_status
        - currency
        - fees_amount_cents
        - coupons_amount_cents
        - credit_notes_amount_cents
        - sub_total_vat_excluded_amount_cents
        - vat_amount_cents
        - sub_total_vat_included_amount_cents
        - prepaid_credit_amount_cents
        - total_amount_cents
        - version_number
        - customer
        - legacy
        - amount_cents
        - credit_amount_cents
        - amount_currency
        - total_amount_currency
        - credit_amount_currency
        - vat_amount_currency
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        sequential_id:
          type: integer
          example: 12345
        number:
          type: string
          example: '222345'
        issuing_date:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        invoice_type:
          type: string
          enum:
            - subscription
            - add_on
            - credit
            - one_off
        status:
          type: string
          enum:
            - draft
            - finalized
        payment_status:
          type: string
          enum:
            - pending
            - succeeded
            - failed
        currency:
          type: string
          example: EUR
        fees_amount_cents:
          type: integer
          example: 20
        coupons_amount_cents:
          type: integer
          example: 20
        credit_notes_amount_cents:
          type: integer
          example: 20
        sub_total_vat_excluded_amount_cents:
          type: integer
          example: 20
        vat_amount_cents:
          type: integer
          example: 20
        sub_total_vat_included_amount_cents:
          type: integer
          example: 20
        prepaid_credit_amount_cents:
          type: integer
          example: 20
        total_amount_cents:
          type: integer
          example: 20
        version_number:
          type: integer
          example: 2
        amount_cents:
          type: integer
          example: 1200
          deprecated: true
        amount_currency:
          type: string
          example: EUR
          deprecated: true
        vat_amount_currency:
          type: string
          example: EUR
          deprecated: true
        credit_amount_cents:
          type: integer
          example: 20
          deprecated: true
        credit_amount_currency:
          type: string
          example: EUR
          deprecated: true
        total_amount_currency:
          type: string
          example: EUR
          deprecated: true
        legacy:
          type: boolean
          example: true
          deprecated: true
        file_url:
          type: string
          example: 'https://example.com'
        customer:
          $ref: '#/components/schemas/CustomerObject'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceMetadataObject'
    InvoiceObjectExtended:
      allOf:
        - $ref: '#/components/schemas/InvoiceObject'
        - type: object
          required:
            - subscriptions
            - fees
            - credits
          properties:
            credits:
              type: array
              items:
                $ref: '#/components/schemas/CreditObject'
            fees:
              type: array
              items:
                $ref: '#/components/schemas/FeeObject'
            subscriptions:
              type: array
              items:
                $ref: '#/components/schemas/SubscriptionObject'
    Invoice:
      type: object
      required:
        - invoice
      properties:
        invoice:
          $ref: '#/components/schemas/InvoiceObjectExtended'
    InvoicesPaginated:
      type: object
      required:
        - invoices
        - meta
      properties:
        invoices:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    InvoiceInput:
      type: object
      required:
        - invoice
      properties:
        invoice:
          type: object
          properties:
            payment_status:
              type: string
              description: Status
              enum:
                - pending
                - succeeded
                - failed
            metadata:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: 1a901a90-1a90-1a90-1a90-1a901a901a90
                  key:
                    type: string
                    example: name
                  value:
                    type: string
                    example: John
    InvoiceOneOffInput:
      type: object
      required:
        - invoice
      properties:
        invoice:
          type: object
          required:
            - external_customer_id
          properties:
            external_customer_id:
              type: string
              example: _ID_
            currency:
              type: string
              example: EUR
            fees:
              type: array
              items:
                type: object
                required:
                  - add_on_code
                properties:
                  add_on_code:
                    type: string
                    example: '12345'
                  unit_amount_cents:
                    type: integer
                    example: 1200
                  units:
                    type: string
                    example: '2.5'
                  description:
                    type: string
                    example: This is description
    WalletObject:
      type: object
      required:
        - lago_id
        - lago_customer_id
        - external_customer_id
        - status
        - currency
        - rate_amount
        - credits_balance
        - balance
        - balance_cents
        - consumed_credits
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        lago_customer_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        external_customer_id:
          type: string
          example: '12345'
        status:
          type: string
          description: Status
          enum:
            - active
            - terminated
        currency:
          type: string
          example: EUR
        name:
          type: string
          example: Name
        rate_amount:
          type: string
          example: '2.0'
        credits_balance:
          type: string
          example: '500.0'
        balance:
          type: string
          example: '1000.0'
          deprecated: true
        balance_cents:
          type: integer
          example: 100000
        consumed_credits:
          type: string
          example: '100.0'
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        expiration_at:
          type: string
          format: date-time
          example: '2022-09-14T23:59:59Z'
        last_balance_sync_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        last_consumed_credit_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        terminated_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
    Wallet:
      type: object
      required:
        - wallet
      properties:
        wallet:
          $ref: '#/components/schemas/WalletObject'
    WalletsPaginated:
      type: object
      required:
        - wallets
        - meta
      properties:
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/WalletObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    WalletInput:
      type: object
      properties:
        wallet:
          type: object
          required:
            - rate_amount
            - currency
            - external_customer_id
          properties:
            name:
              type: string
              example: Wallet name
            rate_amount:
              type: string
              example: '2.0'
            currency:
              type: string
              example: EUR
            paid_credits:
              type: string
              example: '500.0'
            granted_credits:
              type: string
              example: '10.0'
            external_customer_id:
              type: string
              example: '12345'
            expiration_at:
              type: string
              format: date-time
              example: '2022-09-14T23:59:59Z'
    WalletUpdateInput:
      type: object
      required:
        - wallet
      properties:
        wallet:
          type: object
          properties:
            name:
              type: string
              example: Wallet name
            expiration_at:
              type: string
              format: date-time
              example: '2022-09-14T23:59:59Z'
    WalletTransactionObject:
      type: object
      required:
        - lago_id
        - lago_wallet_id
        - status
        - transaction_type
        - credit_amount
        - amount
        - created_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        lago_wallet_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        status:
          type: string
          description: Status
          enum:
            - pending
            - settled
        transaction_type:
          type: string
          description: Transaction type
          enum:
            - inbound
            - outbound
        amount:
          type: string
          example: '500.0'
        credit_amount:
          type: string
          example: '100.0'
        settled_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
    WalletTransactions:
      type: object
      required:
        - wallet_transactions
      properties:
        wallet_transactions:
          type: array
          items:
            $ref: '#/components/schemas/WalletTransactionObject'
    WalletTransactionsPaginated:
      allOf:
        - $ref: '#/components/schemas/WalletTransactions'
        - type: object
          required:
            - meta
          properties:
            meta:
              $ref: '#/components/schemas/PaginationMeta'
    WalletTransactionInput:
      type: object
      required:
        - wallet_transaction
      properties:
        wallet_transaction:
          type: object
          required:
            - wallet_id
          properties:
            wallet_id:
              type: string
              format: uuid
              example: 1a901a90-1a90-1a90-1a90-1a901a901a90
            paid_credits:
              type: string
              example: '100.0'
            granted_credits:
              type: string
              example: '10.0'
    CreditNoteItemObject:
      type: object
      required:
        - lago_id
        - amount_cents
        - amount_currency
        - fee
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        amount_cents:
          type: integer
          example: 1220
        amount_currency:
          type: string
          example: EUR
        fee:
          $ref: '#/components/schemas/FeeObject'
    CreditNoteObject:
      type: object
      required:
        - lago_id
        - sequential_id
        - number
        - lago_invoice_id
        - invoice_number
        - issuing_date
        - reason
        - currency
        - total_amount_cents
        - total_amount_currency
        - credit_amount_cents
        - credit_amount_currency
        - refund_amount_cents
        - refund_amount_currency
        - balance_amount_cents
        - balance_amount_currency
        - vat_amount_cents
        - vat_amount_currency
        - sub_total_vat_excluded_amount_cents
        - sub_total_vat_excluded_amount_currency
        - coupons_adjustement_amount_cents
        - created_at
        - updated_at
      properties:
        lago_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        sequential_id:
          type: integer
          example: 1234
        number:
          type: string
          example: '123456789'
        lago_invoice_id:
          type: string
          format: uuid
          example: 1a901a90-1a90-1a90-1a90-1a901a901a90
        invoice_number:
          type: string
          example: '123456789'
        issuing_date:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        credit_status:
          type: string
          description: Credit status
          enum:
            - available
            - consumed
            - voided
        refund_status:
          type: string
          description: Refund status
          enum:
            - pending
            - succeeded
            - failed
        reason:
          type: string
          description: Reason
          enum:
            - duplicated_charge
            - product_unsatisfactory
            - order_change
            - order_cancellation
            - fraudulent_charge
            - other
        description:
          type: string
          example: description
        currency:
          type: string
          example: EUR
        total_amount_cents:
          type: integer
          example: 1220
        total_amount_currency:
          type: string
          example: EUR
          deprecated: true
        vat_amount_cents:
          type: integer
          example: 20
        vat_amount_currency:
          type: string
          example: EUR
          deprecated: true
        sub_total_vat_excluded_amount_cents:
          type: integer
          example: 1000
        sub_total_vat_excluded_amount_currency:
          type: string
          example: EUR
          deprecated: true
        balance_amount_cents:
          type: integer
          example: 20
        balance_amount_currency:
          type: string
          example: EUR
          deprecated: true
        credit_amount_cents:
          type: integer
          example: 20
        credit_amount_currency:
          type: string
          example: EUR
          deprecated: true
        refund_amount_cents:
          type: integer
          example: 20
        refund_amount_currency:
          type: string
          example: EUR
          deprecated: true
        coupons_adjustement_amount_cents:
          type: integer
          example: 20
        created_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        updated_at:
          type: string
          format: date-time
          example: '2022-09-14T16:35:31Z'
        file_url:
          type: string
          example: 'https://example.com'
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreditNoteItemObject'
    CreditNote:
      type: object
      required:
        - credit_note
      properties:
        credit_note:
          $ref: '#/components/schemas/CreditNoteObject'
    CreditNotes:
      type: object
      required:
        - credit_notes
      properties:
        credit_notes:
          type: array
          items:
            $ref: '#/components/schemas/CreditNoteObject'
    CreditNoteInput:
      type: object
      required:
        - credit_note
      properties:
        credit_note:
          type: object
          required:
            - invoice_id
            - reason
            - items
            - credit_amount_cents
            - refund_amount_cents
          properties:
            invoice_id:
              type: string
              format: uuid
              example: 1a901a90-1a90-1a90-1a90-1a901a901a90
            reason:
              type: string
              description: Reason
              enum:
                - duplicated_charge
                - product_unsatisfactory
                - order_change
                - order_cancellation
                - fraudulent_charge
                - other
            description:
              type: string
              example: description
            credit_amount_cents:
              type: integer
              example: 20
            refund_amount_cents:
              type: integer
              example: 20
            items:
              type: array
              items:
                type: object
                required:
                  - fee_id
                  - amount_cents
                properties:
                  fee_id:
                    type: string
                    format: uuid
                    example: 1a901a90-1a90-1a90-1a90-1a901a901a90
                  amount_cents:
                    type: integer
                    example: 20
    CreditNoteUpdateInput:
      type: object
      required:
        - credit_note
      properties:
        credit_note:
          type: object
          required:
            - refund_status
          properties:
            refund_status:
              type: string
              description: Refund status
              enum:
                - pending
                - succeeded
                - failed
  responses:
    BadRequest:
      $ref: '#/paths/~1plans/post/responses/400'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorForbidden'
    Unauthorized:
      $ref: '#/paths/~1fees/get/responses/401'
    NotAllowed:
      $ref: '#/paths/~1wallets~1%7Bid%7D/delete/responses/405'
    NotFound:
      $ref: '#/paths/~1plans/post/responses/404'
    UnprocessableEntity:
      $ref: '#/paths/~1fees/get/responses/422'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
