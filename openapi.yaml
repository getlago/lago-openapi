openapi: 3.0.3
info:
  title: Lago API documentation
  description: |-
    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
  contact:
    email: tech@getlago.com
  version: 0.35.0-beta
externalDocs:
  description: Lago Github
  url: https://github.com/getlago
servers:
  - url: https://api.getlago.com/api/v1
security:
  - bearerAuth: []
tags:
  - name: billable_metrics
    description: Everything about Billable metric collection
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/billable_metrics/billable-metric-object
  - name: add_ons
    description: Everything about Add-on collection
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/add_ons/add-on-object
  - name: coupons
    description: Everything about Coupon collection
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/coupons/coupon-object
  - name: organizations
    description: Everything about Organization collection
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/organizations/organization-object
  - name: customers
    description: Everything about Customer collection
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/customers/customer-object
  - name: events
    description: Everything about Event collection
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/events/event-object
  - name: plans
    description: Everything about Plan collection
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/plans/plan-object
  - name: subscriptions
    description: Everything about Subscription collection
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/subscriptions/subscription-object
  - name: webhooks
    description: Everything about Webhooks
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/webhooks/message-signature#1-retrieve-the-public-key
  - name: invoices
    description: Everything about Invoice collection
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/invoices/invoice-object
  - name: fees
    description: Everything about Fees
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/invoices/invoice-object#fee-object
  - name: wallets
    description: Everything about Wallet collection
    externalDocs:
      description: Find out more
      url: https://doc.getlago.com/docs/api/wallets/wallet-object
  - name: credit_notes
    description: Everything about Credit notes collection
paths:
  /billable_metrics:
    post:
      tags:
        - billable_metrics
      summary: Create a new billable metric
      description: Create a new billable metric
      operationId: createBillableMetric
      requestBody:
        description: Billable metric payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillableMetricInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillableMetric'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - billable_metrics
      summary: Find Billable metrics
      description: Find all billable metrics in certain organisation
      operationId: findAllBillableMetrics
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillableMetricsPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /billable_metrics/{code}:
    parameters:
      - name: code
        in: path
        description: Code of the existing billable metric
        required: true
        schema:
          type: string
          example: 'example_code'
    put:
      tags:
        - billable_metrics
      summary: Update an existing billable metric
      description: Update an existing billable metric by code
      operationId: updateBillableMetric
      requestBody:
        description: Update an existing billable metric
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillableMetricInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillableMetric'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - billable_metrics
      summary: Find billable metric by code
      description: Return a single billable metric
      operationId: findBillableMetric
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillableMetric'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
    delete:
      tags:
        - billable_metrics
      summary: Delete a billable metric
      description: Delete a billable metric
      operationId: destroyBillableMetric
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillableMetric'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /billable_metrics/{code}/groups:
    get:
      tags:
        - billable_metrics
      summary: Find Billable metric groups
      description: Find all billable metric groups in certain organisation
      operationId: findAllBillableMetricGroups
      parameters:
        - name: code
          in: path
          description: Code of the existing billable metric
          required: true
          schema:
            type: string
            example: 'example_code'
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /add_ons:
    post:
      tags:
        - add_ons
      summary: Create a new add-on
      description: Create a new add-on
      operationId: createAddOn
      requestBody:
        description: Add-on payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOnInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - add_ons
      summary: Find add-ons
      description: Find all add-ons in certain organisation
      operationId: findAllAddOns
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOnsPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /add_ons/{code}:
    parameters:
      - name: code
        in: path
        description: Code of the existing add-on
        required: true
        schema:
          type: string
          example: 'example_code'
    put:
      tags:
        - add_ons
      summary: Update an existing add-on
      description: Update an existing add-on by code
      operationId: updateAddOn
      requestBody:
        description: Update an existing add-on
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOnInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - add_ons
      summary: Find add-on by code
      description: Return a single add-on
      operationId: findAddOn
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
    delete:
      tags:
        - add_ons
      summary: Delete an add-on
      description: Delete an add-on
      operationId: destroyAddOn
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /applied_add_ons:
    post:
      tags:
        - add_ons
      summary: Apply an add-on to a customer
      description: Apply an add-on to a customer
      operationId: applyAddOn
      requestBody:
        description: Apply add-on payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppliedAddOnInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedAddOn'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
  /coupons:
    post:
      tags:
        - coupons
      summary: Create a new coupon
      description: Create a new coupon
      operationId: createCoupon
      requestBody:
        description: Coupon payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - coupons
      summary: Find Coupons
      description: Find all coupons in certain organisation
      operationId: findAllCoupons
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponsPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /coupons/{code}:
    parameters:
      - name: code
        in: path
        description: Code of the existing coupon
        required: true
        schema:
          type: string
          example: 'example_code'
    put:
      tags:
        - coupons
      summary: Update an existing coupon
      description: Update an existing coupon by code
      operationId: updateCoupon
      requestBody:
        description: Update an existing coupon
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - coupons
      summary: Find coupon by code
      description: Return a single coupon
      operationId: findCoupon
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
    delete:
      tags:
        - coupons
      summary: Delete a coupon
      description: Delete a coupon
      operationId: destroyCoupon
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /applied_coupons:
    post:
      tags:
        - coupons
      summary: Apply a coupon to a customer
      description: Apply a coupon to a customer
      operationId: applyCoupon
      requestBody:
        description: Apply coupon payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppliedCouponInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedCoupon'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - coupons
      summary: Find Applied Coupons
      description: Find all applied coupons
      operationId: findAllAppliedCoupons
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
        - name: status
          in: query
          description: Applied coupon status
          required: false
          explode: true
          schema:
            type: string
            description: Status
            enum:
              - active
              - terminated
        - name: external_customer_id
          in: query
          description: External customer ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedCouponsPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /organizations:
    put:
      tags:
        - organizations
      summary: Update an existing Organization
      description: Update an existing organization
      operationId: updateOrganization
      requestBody:
        description: Update an existing organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
  /customers:
    post:
      tags:
        - customers
      summary: Create a customer
      description: Create a new customer
      operationId: createCustomer
      requestBody:
        description: Customer payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - customers
      summary: Find customers
      description: Find all customers in certain organisation
      operationId: findAllCustomers
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /customers/{external_id}:
    parameters:
      - name: external_id
        in: path
        description: External ID of the existing customer
        required: true
        schema:
          type: string
          example: '12345'
    get:
      tags:
        - customers
      summary: Find customer by external ID
      description: Return a single customer
      operationId: findCustomer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
    delete:
      tags:
        - customers
      summary: Delete a customer
      description: Return the deleted customer
      operationId: destroyCustomer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /customers/{customer_external_id}/current_usage:
    get:
      tags:
        - customers
      summary: Find customer current usage
      parameters:
        - name: customer_external_id
          in: path
          description: External ID of the existing customer
          required: true
          schema:
            type: string
            example: '12345'
        - name: external_subscription_id
          in: query
          description: External subscription ID
          required: true
          explode: true
          schema:
            type: string
            example: '54321'
      description: Return a customer current usage
      operationId: findCustomerCurrentUsage
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerUsage'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /customers/{customer_external_id}/portal_url:
    get:
      tags:
        - customers
      summary: Get customer portal URL
      parameters:
        - name: customer_external_id
          in: path
          description: External ID of the existing customer
          required: true
          schema:
            type: string
            example: '12345'
      description: Get customer portal URL
      operationId: getCustomerPortalUrl
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - customer
                properties:
                  customer:
                    type: object
                    required:
                      - portal_url
                    properties:
                      portal_url:
                        type: string
                        example: 'https://app.lago.com/customer-portal/abc/'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseForbidden'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /customers/{customer_external_id}/applied_coupons/{applied_coupon_id}:
    delete:
      tags:
        - customers
      summary: Delete customer's appplied coupon
      parameters:
        - name: customer_external_id
          in: path
          description: External ID of the existing customer
          required: true
          schema:
            type: string
            example: '12345'
        - name: applied_coupon_id
          in: path
          description: Applied Coupon Lago ID
          required: true
          explode: true
          schema:
            type: string
            example: '54321'
      description: Delete customer's appplied coupon
      operationId: deleteAppliedCoupon
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedCoupon'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /events:
    post:
      tags:
        - events
      summary: Create a new event
      description: Create a new event
      operationId: createEvent
      requestBody:
        description: Event payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
        required: true
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
  /events/batch:
    post:
      tags:
        - events
      summary: Create batch events
      description: Create batch events
      operationId: createBatchEvents
      requestBody:
        description: Batch events payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchEventInput'
        required: true
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
  /events/{id}:
    parameters:
      - name: id
        in: path
        description: Id of the existing transaction
        required: true
        schema:
          type: string
          example: '12345'
    get:
      tags:
        - events
      summary: Find event by transaction ID
      description: Return a single event
      operationId: findEvent
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /events/estimate_fees:
    post:
      tags:
        - events
      summary: Estimate fees for an pay in advance charge
      description: Estimate the fees that would be created after reception of an event for a billable metric attached to one or multiple pay in advance charges
      operationId: eventEstimateFees
      requestBody:
        description: Event payload for pay in advance fee estimate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventEstimateFeesInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fees'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
  /plans:
    post:
      tags:
        - plans
      summary: Create a new plan
      description: Create a new plan
      operationId: createPlan
      requestBody:
        description: Plan payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - plans
      summary: Find plans
      description: Find all plans in certain organisation
      operationId: findAllPlans
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlansPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /plans/{code}:
    parameters:
      - name: code
        in: path
        description: Code of the existing plan
        required: true
        schema:
          type: string
          example: 'example_code'
    put:
      tags:
        - plans
      summary: Update an existing plan
      description: Update an existing plan by code
      operationId: updatePlan
      requestBody:
        description: Update an existing plan
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - plans
      summary: Find plan by code
      description: Return a single plan
      operationId: findPlan
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
    delete:
      tags:
        - plans
      summary: Delete a plan
      description: Delete a plan
      operationId: destroyPlan
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /subscriptions:
    post:
      tags:
        - subscriptions
      summary: Assign a plan to a customer
      description: Assign a plan to a customer
      operationId: createSubscription
      requestBody:
        description: Subscription payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCreateInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - subscriptions
      summary: Find subscriptions
      description: Find all suscriptions for certain customer
      operationId: findAllSubscriptions
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
        - name: external_customer_id
          in: query
          description: External customer ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
        - name: plan_code
          in: query
          description: Code of the plan attached to the subscription
          required: false
          explode: true
          schema:
            type: string
            example: 'example_code'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionsPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /subscriptions/{external_id}:
    parameters:
      - name: external_id
        in: path
        description: External ID of the existing subscription
        required: true
        schema:
          type: string
          example: 'example_id'
    put:
      tags:
        - subscriptions
      summary: Update an existing subscription
      description: Update an existing subscription by external ID
      operationId: updateSubscription
      requestBody:
        description: Update an existing subscription
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpdateInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    delete:
      tags:
        - subscriptions
      summary: Terminate a subscription
      description: Terminate a subscription
      operationId: destroySubscription
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '405':
          description: Not Allowed error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotAllowed'
  /webhooks/public_key:
    get:
      tags:
        - webhooks
      summary: Fetch webhook public key
      description: Webhook public key
      operationId: fetchPublicKey
      responses:
        '200':
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
                example: 'MEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ctbT3/Qp84+KeFhnii7NT7fELilKUSnxS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE='
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /invoices:
    post:
      tags:
        - invoices
      summary: Create a new invoice
      description: Create a new one off Invoice
      operationId: createInvoice
      requestBody:
        description: Invoice payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceOneOffInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - invoices
      summary: Find all invoices
      description: Find all invoices in certain organisation
      operationId: findAllInvoices
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
        - name: external_customer_id
          in: query
          description: External customer ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
        - name: issuing_date_from
          in: query
          description: Date from
          required: false
          explode: true
          schema:
            type: string
            format: 'date'
            example: '2022-07-08'
        - name: issuing_date_to
          in: query
          description: Date to
          required: false
          explode: true
          schema:
            type: string
            format: 'date'
            example: '2022-08-09'
        - name: status
          in: query
          description: Status
          required: false
          explode: true
          schema:
            type: string
            enum:
              - draft
              - finalized
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /invoices/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the existing Lago Invoice
        required: true
        schema:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
    put:
      tags:
        - invoices
      summary: Update an existing invoice status
      description: Update an existing invoice
      operationId: updateInvoice
      requestBody:
        description: Update an existing invoice
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - invoices
      summary: Find invoice by ID
      description: Return a single invoice
      operationId: findInvoice
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /invoices/{id}/download:
    post:
      tags:
        - invoices
      summary: Download an existing invoice
      parameters:
        - name: id
          in: path
          description: ID of the existing Lago Invoice
          required: true
          schema:
            type: string
            format: 'uuid'
            example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
      description: Download an existing invoice
      operationId: downloadInvoice
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /invoices/{id}/retry_payment:
    post:
      tags:
        - invoices
      summary: Retry invoice payment
      parameters:
        - name: id
          in: path
          description: ID of the existing Lago Invoice
          required: true
          schema:
            type: string
            format: 'uuid'
            example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
      description: Retry invoice payment
      operationId: retryPayment
      responses:
        '200':
          description: Successful response
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '405':
          description: Not Allowed error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotAllowed'
  /invoices/{id}/refresh:
    put:
      tags:
        - invoices
      summary: Refresh a draft invoice
      parameters:
        - name: id
          in: path
          description: ID of the existing Lago Invoice
          required: true
          schema:
            type: string
            format: 'uuid'
            example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
      description: Refresh a draft invoice
      operationId: refreshInvoice
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /invoices/{id}/finalize:
    put:
      tags:
        - invoices
      summary: Finalize a draft invoice
      parameters:
        - name: id
          in: path
          description: ID of the draft Lago Invoice
          required: true
          schema:
            type: string
            format: 'uuid'
            example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
      description: Finalize a draft invoice
      operationId: finalizeInvoice
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /fees/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the existing Lago Fee
        required: true
        schema:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
    get:
      tags:
        - fees
      summary: Find fee by ID
      description: Return a single fee
      operationId: findFee
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeObject'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
    put:
      tags:
        - fees
      summary: Update an existing fee
      description: Update an existing fee
      operationId: updateFee
      requestBody:
        description: Payload to update a fee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeUpdateInput'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeObject'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
  /fees:
    get:
      tags:
        - fees
      summary: Find all fees
      description: Find all fees of an organization and filter them
      operationId: findAllFees
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
        - name: external_customer_id
          in: query
          description: External customer ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
        - name: external_subscription_id
          in: query
          description: External subscription ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
        - name: currency
          in: query
          description: Amount currency
          required: false
          explode: true
          schema:
            type: string
            example: 'EUR'
        - name: fee_type
          in: query
          description: Fee type
          required: false
          explode: true
          schema:
            type: string
            enum:
              - charge
              - add_on
              - subscription
              - credit
              - instant_charge
            example: 'charge'
        - name: billable_metric_code
          in: query
          description: Code of the source billable metric
          required: false
          explode: true
          schema:
            type: string
            example: 'bm_code'
        - name: payment_status
          in: query
          description: Payment status
          required: false
          explode: true
          schema:
            type: string
            enum:
              - pending
              - succeeded
              - failed
              - refunded
            example: 'succeeded'
        - name: created_at_from
          in: query
          description: Creation datetime from
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: created_at_to
          in: query
          description: Creation date to
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: succeeded_at_from
          in: query
          description: Payment succees date from
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: succeeded_at_to
          in: query
          description: Payment succees date to
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: failed_at_from
          in: query
          description: Payment failed date from
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: failed_at_to
          in: query
          description: Payment failed date to
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: refunded_at_from
          in: query
          description: Payment refund date from
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
        - name: refunded_at_to
          in: query
          description: Payment refund date to
          required: false
          explode: true
          schema:
            type: string
            example: '2023-03-28T12:21:51Z'
            format: date-time
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeesPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
  /wallets:
    post:
      tags:
        - wallets
      summary: Create a new wallet
      description: Create a new wallet
      operationId: createWallet
      requestBody:
        description: Wallet payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - wallets
      summary: Find wallets
      description: Find all wallets for certain customer
      operationId: findAllWallets
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
        - name: external_customer_id
          in: query
          description: External customer ID
          required: true
          explode: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletsPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /wallets/{id}:
    parameters:
      - name: id
        in: path
        description: Lago ID of the existing wallet
        required: true
        schema:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
    put:
      tags:
        - wallets
      summary: Update an existing wallet
      description: Update an existing wallet
      operationId: updateWallet
      requestBody:
        description: Update an existing wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletUpdateInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - wallets
      summary: Find wallet
      description: Return a wallet
      operationId: findWallet
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
    delete:
      tags:
        - wallets
      summary: Delete a wallet
      description: Delete a wallet
      operationId: destroyWallet
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '405':
          description: Not Allowed error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotAllowed'
  /wallet_transactions:
    post:
      tags:
        - wallets
      summary: Create a new wallet transaction
      description: Create a new wallet transaction
      operationId: createWalletTransaction
      requestBody:
        description: Wallet transaction payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletTransactionInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransactions'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
  /wallets/{id}/wallet_transactions:
    get:
      tags:
        - wallets
      summary: Find wallet transactions
      description: Find all wallet transactions for certain wallet
      operationId: findAllWalletTransactions
      parameters:
        - name: id
          in: path
          description: Lago ID of the existing wallet
          required: true
          schema:
            type: string
            format: 'uuid'
            example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
        - name: status
          in: query
          description: Status (pending or settled)
          required: false
          explode: true
          schema:
            type: string
            example: 'pending'
        - name: transaction_type
          in: query
          description: Transaction Type (inbound or outbound)
          required: false
          explode: true
          schema:
            type: string
            example: 'inbound'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransactionsPaginated'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /credit_notes:
    post:
      tags:
        - credit_notes
      summary: Create a new Credit note
      description: Create a new credit note
      operationId: createCreditNote
      requestBody:
        description: Credit note payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - credit_notes
      summary: Find Credit notes
      description: Find all credit notes in certain organisation
      operationId: findAllCreditNotes
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          explode: true
          schema:
            type: integer
            example: 2
        - name: per_page
          in: query
          description: Number of records per page
          required: false
          explode: true
          schema:
            type: integer
            example: 20
        - name: external_customer_id
          in: query
          description: External customer ID
          required: false
          explode: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNotes'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
  /credit_notes/{id}:
    parameters:
      - name: id
        in: path
        description: Id of the existing credit note
        required: true
        schema:
          type: string
          example: '12345'
    put:
      tags:
        - credit_notes
      summary: Update an existing credit note
      description: Update an existing credit note
      operationId: updateCreditNote
      requestBody:
        description: Update an existing credit note
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNoteUpdateInput'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        '400':
          description: Bad Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBadRequest'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '422':
          description: Unprocessable entity error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnprocessableEntity'
    get:
      tags:
        - credit_notes
      summary: Find credit note
      description: Return a single credit note
      operationId: findCreditNote
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /credit_notes/{id}/download:
    post:
      tags:
        - credit_notes
      summary: Download an existing credit note
      parameters:
        - name: id
          in: path
          description: ID of the existing Lago Credit note
          required: true
          schema:
            type: string
            format: 'uuid'
            example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
      description: Download an existing credit note
      operationId: downloadCreditNote
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
  /credit_notes/{id}/void:
    put:
      tags:
        - credit_notes
      summary: Void existing credit note
      parameters:
        - name: id
          in: path
          description: ID of the existing Lago Credit note
          required: true
          schema:
            type: string
            format: 'uuid'
            example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
      description: Void an existing credit note
      operationId: voidCreditNote
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditNote'
        '401':
          description: Unauthorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUnauthorized'
        '404':
          description: Not Found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotFound'
        '405':
          description: Not Allowed error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseNotAllowed'

components:
  schemas:
    BillableMetricGroup:
      type: object
      required:
        - key
        - values
      properties:
        key:
          type: string
          example: 'region'
        values:
          type: array
          items:
            oneOf:
              - type: string
              - type: object
    BillableMetricObject:
      type: object
      required:
        - lago_id
        - name
        - code
        - aggregation_type
        - created_at
        - active_subscriptions_count
        - draft_invoices_count
        - plans_count
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        name:
          type: string
          example: 'bm1'
        code:
          type: string
          example: 'example_code'
        description:
          type: string
          example: 'description'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        field_name:
          type: string
          example: 'amount'
        aggregation_type:
          type: string
          description: Aggregation type
          enum:
            - count_agg
            - sum_agg
            - max_agg
            - unique_count_agg
            - recurring_count_agg
        group:
          $ref: '#/components/schemas/BillableMetricGroup'
        active_subscriptions_count:
          type: integer
          example: 0
        draft_invoices_count:
          type: integer
          example: 0
        plans_count:
          type: integer
          example: 0
    BillableMetric:
      type: object
      required:
        - billable_metric
      properties:
        billable_metric:
          $ref: '#/components/schemas/BillableMetricObject'
    BillableMetricsPaginated:
      type: object
      required:
        - billable_metrics
        - meta
      properties:
        billable_metrics:
          type: array
          items:
            $ref: '#/components/schemas/BillableMetricObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    BillableMetricInput:
      type: object
      required:
        - billable_metric
      properties:
        billable_metric:
          type: object
          properties:
            name:
              type: string
              example: 'bm1'
            code:
              type: string
              example: 'example_code'
            description:
              type: string
              example: 'description'
            field_name:
              type: string
              example: 'amount'
            aggregation_type:
              type: string
              description: Aggregation type
              enum:
                - count_agg
                - sum_agg
                - max_agg
                - unique_count_agg
                - recurring_count_agg
            group:
              $ref: '#/components/schemas/BillableMetricGroup'
    GroupObject:
      type: object
      required:
        - lago_id
        - key
        - value
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        key:
          type: string
          example: 'region'
        value:
          type: string
          example: EU
    GroupsPaginated:
      type: object
      required:
        - groups
        - meta
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    AddOnObject:
      type: object
      required:
        - lago_id
        - name
        - code
        - amount_cents
        - amount_currency
        - created_at
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        name:
          type: string
          example: 'example name'
        code:
          type: string
          example: 'example_code'
        description:
          type: string
          example: 'description'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: 'EUR'
    AddOn:
      type: object
      required:
        - add_on
      properties:
        add_on:
          $ref: '#/components/schemas/AddOnObject'
    AddOnsPaginated:
      type: object
      required:
        - add_ons
        - meta
      properties:
        add_ons:
          type: array
          items:
            $ref: '#/components/schemas/AddOnObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    AddOnInput:
      type: object
      required:
        - add_on
      properties:
        add_on:
          type: object
          properties:
            name:
              type: string
              example: 'example name'
            code:
              type: string
              example: 'example_code'
            description:
              type: string
              example: 'description'
            amount_cents:
              type: integer
              example: 1200
            amount_currency:
              type: string
              example: 'EUR'
    AppliedAddOnObject:
      type: object
      required:
        - lago_id
        - lago_add_on_id
        - add_on_code
        - external_customer_id
        - lago_customer_id
        - amount_cents
        - amount_currency
        - created_at
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        lago_add_on_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        add_on_code:
          type: string
          example: 'code'
        lago_customer_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        external_customer_id:
          type: string
          example: '1234567'
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: 'EUR'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
    AppliedAddOn:
      type: object
      required:
        - applied_add_on
      properties:
        applied_add_on:
          $ref: '#/components/schemas/AppliedAddOnObject'
    AppliedAddOnInput:
      type: object
      required:
        - applied_add_on
      properties:
        applied_add_on:
          type: object
          required:
            - external_customer_id
            - add_on_code
          properties:
            external_customer_id:
              type: string
              example: '1234567'
            add_on_code:
              type: string
              example: 'code'
            amount_cents:
              type: integer
              example: 1200
            amount_currency:
              type: string
              example: 'EUR'
    CouponObject:
      type: object
      required:
        - lago_id
        - name
        - code
        - expiration
        - coupon_type
        - frequency
        - created_at
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        name:
          type: string
          example: 'coupon1'
        code:
          type: string
          example: 'example_code'
        coupon_type:
          type: string
          description: Coupon type
          enum:
            - fixed_amount
            - percentage
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: 'EUR'
        reusable:
          type: boolean
          example: true
        limited_plans:
          type: boolean
          example: true
        plan_codes:
          type: array
          items:
            type: string
            example: 'code1'
        limited_billable_metrics:
          type: boolean
          example: true
        billable_metric_codes:
          type: array
          items:
            type: string
            example: 'code2'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        percentage_rate:
          type: number
          example: 25.00
        frequency:
          type: string
          description: Frequency type
          enum:
            - once
            - recurring
        frequency_duration:
          type: integer
          example: 3
        expiration_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T23:59:59Z'
        expiration:
          type: string
          description: Expiration type
          enum:
            - no_expiration
            - time_limit
    Coupon:
      type: object
      required:
        - coupon
      properties:
        coupon:
          $ref: '#/components/schemas/CouponObject'
    CouponsPaginated:
      type: object
      required:
        - coupons
        - meta
      properties:
        coupons:
          type: array
          items:
            $ref: '#/components/schemas/CouponObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    CouponInput:
      type: object
      required:
        - coupon
      properties:
        coupon:
          type: object
          properties:
            name:
              type: string
              example: 'coupon1'
            code:
              type: string
              example: 'example_code'
            coupon_type:
              type: string
              description: Coupon type
              enum:
                - fixed_amount
                - percentage
            amount_cents:
              type: integer
              example: 1200
            amount_currency:
              type: string
              example: 'EUR'
            reusable:
              type: boolean
              example: true
            percentage_rate:
              type: number
              example: 25.00
            frequency:
              type: string
              description: Frequency type
              enum:
                - once
                - recurring
            frequency_duration:
              type: integer
              example: 3
            expiration_at:
              type: string
              format: 'date-time'
              example: '2022-09-14T23:59:59Z'
            expiration:
              type: string
              description: Expiration type
              enum:
                - no_expiration
                - time_limit
            applies_to:
              type: object
              properties:
                plan_codes:
                  type: array
                  items:
                    type: string
                    example: 'code1'
                billable_metric_codes:
                  type: array
                  items:
                    type: string
                    example: 'code2'
    AppliedCouponObject:
      type: object
      required:
        - lago_id
        - lago_coupon_id
        - coupon_code
        - external_customer_id
        - lago_customer_id
        - status
        - amount_cents
        - amount_currency
        - frequency
        - created_at
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        lago_coupon_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        coupon_code:
          type: string
          example: 'example_code'
        lago_customer_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        external_customer_id:
          type: string
          example: '123456'
        status:
          type: string
          description: Status
          enum:
            - active
            - terminated
        amount_cents:
          type: integer
          example: 1200
        amount_cents_remaining:
          type: integer
          example: 800
        amount_currency:
          type: string
          example: 'EUR'
        percentage_rate:
          type: number
          example: 25.00
        frequency:
          type: string
          description: Frequency type
          enum:
            - once
            - recurring
        frequency_duration:
          type: integer
          example: 3
        frequency_duration_remaining:
          type: integer
          example: 2
        expiration_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T23:59:59Z'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        terminated_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
    AppliedCouponObjectExtended:
      allOf:
        - $ref: '#/components/schemas/AppliedCouponObject'
        - type: object
          required:
            - credits
          properties:
            credits:
              type: array
              items:
                $ref: '#/components/schemas/CreditObject'
    AppliedCoupon:
      type: object
      required:
        - applied_coupon
      properties:
        applied_coupon:
          $ref: '#/components/schemas/AppliedCouponObject'
    AppliedCouponsPaginated:
      type: object
      required:
        - applied_coupons
        - meta
      properties:
        applied_coupons:
          type: array
          items:
            $ref: '#/components/schemas/AppliedCouponObjectExtended'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    AppliedCouponInput:
      type: object
      required:
        - applied_coupon
      properties:
        applied_coupon:
          type: object
          required:
            - external_customer_id
            - coupon_code
          properties:
            external_customer_id:
              type: string
              example: '123456'
            coupon_code:
              type: string
              example: 'example_code'
            frequency:
              type: string
              description: Frequency type
              enum:
                - once
                - recurring
            frequency_duration:
              type: integer
              example: 3
            amount_cents:
              type: integer
              example: 1200
            amount_currency:
              type: string
              example: 'EUR'
            percentage_rate:
              type: number
              example: 25.00
    BillingConfigurationOrganization:
      type: object
      properties:
        invoice_footer:
          type: string
          example: 'text'
        invoice_grace_period:
          type: integer
          example: 5
        document_locale:
          type: string
          example: fr
        vat_rate:
          type: number
          example: 25.00
    OrganizationObject:
      type: object
      required:
        - name
        - created_at
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        name:
          type: string
          example: 'example name'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        webhook_url:
          type: string
          example: 'https://example.com'
        country:
          type: string
          example: CZ
        address_line1:
          type: string
          example: 'address1'
        address_line2:
          type: string
          example: 'address2'
        state:
          type: string
          example: 'state1'
        zipcode:
          type: string
          example: '10000'
        email:
          type: string
          format: 'email'
          example: 'example@example.com'
        city:
          type: string
          example: 'City'
        legal_name:
          type: string
          example: 'name1'
        legal_number:
          type: string
          example: '10000'
        timezone:
          type: string
          example: 'UTC'
        billing_configuration:
          $ref: '#/components/schemas/BillingConfigurationOrganization'
    Organization:
      type: object
      required:
        - organization
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationObject'
    OrganizationInput:
      type: object
      required:
        - organization
      properties:
        organization:
          type: object
          properties:
            webhook_url:
              type: string
              example: 'https://example.com'
            country:
              type: string
              example: CZ
            address_line1:
              type: string
              example: 'address1'
            address_line2:
              type: string
              example: 'address2'
            state:
              type: string
              example: 'state1'
            zipcode:
              type: string
              example: '10000'
            email:
              type: string
              format: 'email'
              example: 'example@example.com'
            city:
              type: string
              example: 'City'
            legal_name:
              type: string
              example: 'name1'
            legal_number:
              type: string
              example: '10000'
            timezone:
              type: string
              example: 'Europe/Paris'
            email_settings:
              type: array
              items:
                type: string
                enum: [invoice.finalized, credit_note.created]
            billing_configuration:
              $ref: '#/components/schemas/BillingConfigurationOrganization'
    BillingConfigurationCustomer:
      type: object
      additionalProperties: true
      properties:
        invoice_grace_period:
          type: integer
          example: 3
        payment_provider:
          type: string
          description: Payment provider type
          enum:
            - stripe
            - gocardless
        provider_customer_id:
          type: string
          example: '123456'
        sync_with_provider:
          type: boolean
          example: true
        document_locale:
          type: string
          example: fr
        vat_rate:
          type: number
          example: 25.00
    CustomerMetadataObject:
      type: object
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        key:
          type: string
          example: 'name'
        value:
          type: string
          example: 'John'
        display_in_invoice:
          type: boolean
          example: false
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
    CustomerObject:
      type: object
      required:
        - lago_id
        - sequential_id
        - slug
        - external_id
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        external_id:
          type: string
          example: '12345'
        name:
          type: string
          example: 'John Doe'
        sequential_id:
          type: integer
          example: 12345
        slug:
          type: string
          example: 'slug'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        country:
          type: string
          example: CZ
        address_line1:
          type: string
          example: 'address1'
        address_line2:
          type: string
          example: 'address2'
        state:
          type: string
          example: 'state1'
        zipcode:
          type: string
          example: '10000'
        email:
          type: string
          format: 'email'
          example: 'example@example.com'
        city:
          type: string
          example: 'City'
        url:
          type: string
          example: 'https://example.com'
        phone:
          type: string
          example: '+3551234567'
        lago_url:
          type: string
          example: 'https://lago.url'
        legal_name:
          type: string
          example: 'name1'
        legal_number:
          type: string
          example: '10000'
        currency:
          type: string
          example: 'EUR'
        timezone:
          type: string
          example: 'UTC'
        applicable_timezone:
          type: string
          example: 'UTC'
        billing_configuration:
          $ref: '#/components/schemas/BillingConfigurationCustomer'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/CustomerMetadataObject'
    Customer:
      type: object
      required:
        - customer
      properties:
        customer:
          $ref: '#/components/schemas/CustomerObject'
    CustomersPaginated:
      type: object
      required:
        - customers
        - meta
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    CustomerInput:
      type: object
      required:
        - customer
      properties:
        customer:
          type: object
          required:
            - external_id
          properties:
            external_id:
              type: string
              example: '12345'
            name:
              type: string
              example: 'John Doe'
            country:
              type: string
              example: CZ
            address_line1:
              type: string
              example: 'address1'
            address_line2:
              type: string
              example: 'address2'
            state:
              type: string
              example: 'state1'
            zipcode:
              type: string
              example: '10000'
            email:
              type: string
              format: 'email'
              example: 'example@example.com'
            city:
              type: string
              example: 'City'
            url:
              type: string
              example: 'https://example.com'
            phone:
              type: string
              example: '+3551234567'
            lago_url:
              type: string
              example: 'https://lago.url'
            legal_name:
              type: string
              example: 'name1'
            legal_number:
              type: string
              example: '10000'
            currency:
              type: string
              example: 'EUR'
            timezone:
              type: string
              example: 'Europe/Paris'
            billing_configuration:
              $ref: '#/components/schemas/BillingConfigurationCustomer'
            metadata:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: 'uuid'
                    example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
                  key:
                    type: string
                    example: 'name'
                  value:
                    type: string
                    example: 'John'
                  display_in_invoice:
                    type: boolean
                    example: false
    ChargeUsageObject:
      type: object
      required:
        - units
        - amount_cents
        - amount_currency
        - charge
        - billable_metric
        - groups
      properties:
        units:
          type: number
          example: 3.0
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: 'EUR'
        charge:
          type: object
          properties:
            lago_id:
              type: string
              format: 'uuid'
              example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
            charge_model:
              type: string
              description: Charge model type
              enum:
                - standard
                - graduated
                - package
                - percentage
                - volume
            pay_in_advance:
              type: boolean
            min_amount_cents:
              type: integer
              example: 1200
        billable_metric:
          type: object
          properties:
            lago_id:
              type: string
              format: 'uuid'
              example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
            name:
              type: string
              example: 'Example name'
            code:
              type: string
              example: 'code'
            aggregation_type:
              type: string
              description: Aggregation type
              enum:
                - count_agg
                - sum_agg
                - max_agg
                - unique_count_agg
                - recurring_count_agg
        groups:
          type: array
          items:
            type: object
            properties:
              lago_id:
                type: string
                format: 'uuid'
                example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
              key:
                type: string
                example: 'key'
              value:
                type: string
                example: 'value'
              units:
                type: number
                example: 3.5
              amount_cents:
                type: integer
                example: 1200
    CustomerUsageObject:
      type: object
      required:
        - from_datetime
        - to_datetime
        - issuing_date
        - amount_cents
        - amount_currency
        - total_amount_cents
        - total_amount_currency
        - vat_amount_cents
        - vat_amount_currency
        - charges_usage
      properties:
        from_datetime:
          type: string
          format: 'date-time'
          example: '2022-09-14T00:00:00Z'
        to_datetime:
          type: string
          format: 'date-time'
          example: '2022-09-14T00:00:00Z'
        issuing_date:
          type: string
          format: 'date-time'
          example: '2022-09-15T00:00:00Z'
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: 'EUR'
        total_amount_cents:
          type: integer
          example: 1400
        total_amount_currency:
          type: string
          example: 'EUR'
        vat_amount_cents:
          type: integer
          example: 200
        vat_amount_currency:
          type: string
          example: 'EUR'
        charges_usage:
          type: array
          items:
            $ref: '#/components/schemas/ChargeUsageObject'
    CustomerUsage:
      type: object
      required:
        - customer_usage
      properties:
        customer_usage:
          $ref: '#/components/schemas/CustomerUsageObject'
    EventObject:
      type: object
      required:
        - lago_id
        - transaction_id
        - lago_customer_id
        - external_customer_id
        - code
        - timestamp
        - lago_subscription_id
        - external_subscription_id
        - created_at
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        transaction_id:
          type: string
          example: '987654321'
        lago_customer_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        external_customer_id:
          type: string
          example: '123456'
        code:
          type: string
          example: 'code'
        timestamp:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        properties:
          type: object
        lago_subscription_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        external_subscription_id:
          type: string
          example: '123456'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
    Event:
      type: object
      required:
        - event
      properties:
        event:
          $ref: '#/components/schemas/EventObject'
    EventInput:
      type: object
      required:
        - event
      properties:
        event:
          type: object
          required:
            - transaction_id
            - code
          properties:
            transaction_id:
              type: string
              example: '123456'
            external_customer_id:
              type: string
              example: '654321'
            code:
              type: string
              example: 'code'
            timestamp:
              type: integer
              example: 1669823754
            external_subscription_id:
              type: string
              example: '123456'
            properties:
              type: object
    EventEstimateFeesInput:
      type: object
      required:
        - event
      properties:
        event:
          type: object
          required:
            - "code"
          properties:
            code:
              type: string
              example: 'code'
            external_customer_id:
              type: string
              example: '654321'
            external_subscription_id:
              type: string
              example: '123456'
            properties:
              type: object
    BatchEventInput:
      type: object
      required:
        - event
      properties:
        event:
          type: object
          required:
            - transaction_id
            - external_subscription_ids
            - code
          properties:
            transaction_id:
              type: string
              example: '123456'
            external_customer_id:
              type: string
              example: '654321'
            code:
              type: string
              example: 'code'
            timestamp:
              type: integer
              example: 1669823754
            external_subscription_ids:
              type: array
              items:
                type: string
            properties:
              type: object
    Fees:
      type: object
      required:
        - fees
      properties:
        fees:
          type: array
          items:
            $ref: '#/components/schemas/FeeObject'
    FeesPaginated:
      allOf:
        - $ref: '#/components/schemas/Fees'
        - type: object
          required:
            - meta
          properties:
            meta:
              $ref: '#/components/schemas/PaginationMeta'
    FeeUpdateInput:
      type: object
      required:
        - invoice
      properties:
        invoice:
          type: object
          required:
            - payment_status
          properties:
            payment_status:
              type: string
              description: Status
              enum:
                - pending
                - succeeded
                - failed
                - refunded
    GroupPropertiesObject:
      type: object
      required:
        - group_id
        - values
      properties:
        group_id:
          type: string
          example: '123456'
        values:
          type: object
    ChargeObject:
      type: object
      required:
        - lago_id
        - lago_billable_metric_id
        - billable_metric_code
        - created_at
        - charge_model
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        lago_billable_metric_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        billable_metric_code:
          type: string
          example: 'bm_code'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        charge_model:
          type: string
          description: Charge model type
          enum:
            - standard
            - graduated
            - package
            - percentage
            - volume
        pay_in_advance:
          type: boolean
          example: true
        invoiceable:
          type: boolean
          example: true
        min_amount_cents:
          type: integer
          example: 1200
        properties:
          type: object
        group_properties:
          type: array
          items:
            $ref: '#/components/schemas/GroupPropertiesObject'
    PlanObject:
      type: object
      required:
        - lago_id
        - name
        - created_at
        - code
        - interval
        - amount_cents
        - amount_currency
        - active_subscriptions_count
        - draft_invoices_count
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        name:
          type: string
          example: 'example name'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        code:
          type: string
          example: 'example_code'
        interval:
          type: string
          description: Plan interval
          enum:
            - weekly
            - monthly
            - yearly
        description:
          type: string
          example: 'description'
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: 'EUR'
        trial_period:
          type: number
          example: 2
        pay_in_advance:
          type: boolean
          example: true
        bill_charges_monthly:
          type: boolean
          example: false
        active_subscriptions_count:
          type: integer
          example: 2
        draft_invoices_count:
          type: integer
          example: 2
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeObject'
    Plan:
      type: object
      required:
        - plan
      properties:
        plan:
          $ref: '#/components/schemas/PlanObject'
    PlansPaginated:
      type: object
      required:
        - plans
        - meta
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/PlanObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    PlanInput:
      type: object
      required:
        - plan
      properties:
        plan:
          type: object
          properties:
            name:
              type: string
              example: 'example name'
            code:
              type: string
              example: 'example_code'
            interval:
              type: string
              description: Plan interval
              enum:
                - weekly
                - monthly
                - yearly
            description:
              type: string
              example: 'description'
            amount_cents:
              type: integer
              example: 1200
            amount_currency:
              type: string
              example: 'EUR'
            trial_period:
              type: number
              example: 2
            pay_in_advance:
              type: boolean
              example: true
            bill_charges_monthly:
              type: boolean
              example: false
            charges:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: 'uuid'
                    example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
                  billable_metric_id:
                    type: string
                    format: 'uuid'
                    example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
                  charge_model:
                    type: string
                    description: Charge model type
                    enum:
                      - standard
                      - graduated
                      - package
                      - percentage
                      - volume
                  pay_in_advance:
                    type: boolean
                  invoiceable:
                    type: boolean
                  min_amount_cents:
                    type: integer
                  properties:
                    type: object
                  group_properties:
                    type: array
                    items:
                      type: object
                      required:
                        - group_id
                        - values
                      properties:
                        group_id:
                          type: string
                          example: '123456'
                        values:
                          type: object
    SubscriptionObject:
      type: object
      required:
        - lago_id
        - lago_customer_id
        - billing_time
        - external_customer_id
        - subscription_at
        - created_at
        - plan_code
        - started_at
        - external_id
        - status
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        external_id:
          type: string
          example: '12345'
        lago_customer_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        external_customer_id:
          type: string
          example: '54321'
        name:
          type: string
          example: 'Test subscription'
        plan_code:
          type: string
          example: 'plan_code'
        status:
          type: string
          description: Subscription status
          enum:
            - active
            - pending
            - terminated
            - canceled
        billing_time:
          type: string
          description: Billing time
          enum:
            - calendar
            - anniversary
        subscription_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        started_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        terminated_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        canceled_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        previous_plan_code:
          type: string
          example: 'previous_code'
        next_plan_code:
          type: string
          example: 'next_code'
        downgrade_plan_date:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
    Subscription:
      type: object
      required:
        - subscription
      properties:
        subscription:
          $ref: '#/components/schemas/SubscriptionObject'
    SubscriptionsPaginated:
      type: object
      required:
        - subscriptions
        - meta
      properties:
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    SubscriptionCreateInput:
      type: object
      required:
        - subscription
      properties:
        subscription:
          type: object
          required:
            - external_customer_id
            - plan_code
            - external_id
          properties:
            external_customer_id:
              type: string
              example: '12345'
            plan_code:
              type: string
              example: 'example_code'
            name:
              type: string
              example: 'Test name'
            external_id:
              type: string
              example: '54321'
            billing_time:
              type: string
              description: Billing time
              enum:
                - calendar
                - anniversary
            subscription_at:
              type: string
              format: 'date-time'
              example: '2022-08-08T00:00:00Z'
    SubscriptionUpdateInput:
      type: object
      required:
        - subscription
      properties:
        subscription:
          type: object
          properties:
            name:
              type: string
              example: 'New name'
            subscription_at:
              type: string
              format: 'date-time'
              example: '2022-08-08T00:00:00Z'
    CreditObject:
      type: object
      required:
        - lago_id
        - item
        - amount_cents
        - amount_currency
        - invoice
        - before_vat
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        amount_cents:
          type: integer
          example: 1200
        amount_currency:
          type: string
          example: 'EUR'
        before_vat:
          type: boolean
          example: false
        item:
          type: object
          required:
            - lago_id
            - type
            - code
            - name
          properties:
            lago_id:
              type: string
              format: 'uuid'
              example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
            type:
              type: string
              example: 'coupon'
            code:
              type: string
              example: 'code'
            name:
              type: string
              example: 'name'
        invoice:
          type: object
          required:
            - lago_id
            - payment_status
          properties:
            lago_id:
              type: string
              format: 'uuid'
              example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
            payment_status:
              type: string
              enum:
                - pending
                - succeeded
                - failed
    FeeObject:
      type: object
      required:
        - lago_id
        - item
        - amount_cents
        - amount_currency
        - vat_amount_cents
        - vat_amount_currency
        - units
        - payment_status
        - created_at
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        lago_group_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        lago_invoice_id:
          type: string
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
          format: uuid
        lago_true_up_fee_id:
          type: string
          format: uuid
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        lago_true_up_parent_fee_id:
          type: string
          format: uuid
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        external_subscription_id:
          type: string
          example: '54321'
        amount_cents:
          type: integer
          example: 1000
        amount_currency:
          type: string
          example: 'EUR'
        vat_amount_cents:
          type: integer
          example: 200
        vat_amount_currency:
          type: string
          example: 'EUR'
        units:
          type: number
          example: 2.5
        total_amount_cents:
          type: integer
          example: 1200
        total_amount_currency:
          type: string
          example: 'EUR'
        events_count:
          type: integer
          example: 5
        pay_in_advance:
          type: boolean
          example: true
        invoiceable:
          type: boolean
          example: true
        from_date:
          type: string
          format: 'date-time'
          example: '2022-08-08T00:00:00Z'
        to_date:
          type: string
          format: 'date-time'
          example: '2022-08-08T00:00:00Z'
        payment_status:
          type: string
          enum:
            - pending
            - succeeded
            - failed
            - refunded
        created_at:
          type: string
          example: '2022-09-14T16:35:31Z'
          format: date-time
        succeeded_at:
          type: string
          example: '2022-09-14T16:35:31Z'
          format: date-time
        failed_at:
          type: string
          example: '2022-09-14T16:35:31Z'
          format: date-time
        refunded_at:
          type: string
          example: '2022-09-14T16:35:31Z'
          format: date-time
        item:
          type: object
          required:
            - type
            - code
            - name
            - lago_item_id
            - item_type
          properties:
            type:
              type: string
              description: Billing time
              enum:
                - charge
                - add_on
                - subscription
                - credit
            code:
              type: string
              example: 'code'
            name:
              type: string
              example: 'name'
            lago_item_id:
              type: string
              example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
              format: uuid
            item_type:
              type: string
              enum:
                - AddOn
                - BillableMetric
                - Subscription
                - WalletTransaction
    InvoiceMetadataObject:
      type: object
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        key:
          type: string
          example: 'name'
        value:
          type: string
          example: 'John'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
    InvoiceObject:
      type: object
      required:
        - lago_id
        - sequential_id
        - number
        - issuing_date
        - invoice_type
        - status
        - payment_status
        - currency
        - fees_amount_cents
        - coupons_amount_cents
        - credit_notes_amount_cents
        - sub_total_vat_excluded_amount_cents
        - vat_amount_cents
        - sub_total_vat_included_amount_cents
        - prepaid_credit_amount_cents
        - total_amount_cents
        - version_number
        - customer
        - legacy
        - amount_cents
        - credit_amount_cents
        - amount_currency
        - total_amount_currency
        - credit_amount_currency
        - vat_amount_currency
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        sequential_id:
          type: integer
          example: 12345
        number:
          type: string
          example: '222345'
        issuing_date:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        invoice_type:
          type: string
          enum:
            - subscription
            - add_on
            - credit
        status:
          type: string
          enum:
            - draft
            - finalized
        payment_status:
          type: string
          enum:
            - pending
            - succeeded
            - failed
        currency:
          type: string
          example: 'EUR'
        fees_amount_cents:
          type: integer
          example: 20
        coupons_amount_cents:
          type: integer
          example: 20
        credit_notes_amount_cents:
          type: integer
          example: 20
        sub_total_vat_excluded_amount_cents:
          type: integer
          example: 20
        vat_amount_cents:
          type: integer
          example: 20
        sub_total_vat_included_amount_cents:
          type: integer
          example: 20
        prepaid_credit_amount_cents:
          type: integer
          example: 20
        total_amount_cents:
          type: integer
          example: 20
        version_number:
          type: integer
          example: 2
        amount_cents:
          type: integer
          example: 1200
          deprecated: true
        amount_currency:
          type: string
          example: 'EUR'
          deprecated: true
        vat_amount_currency:
          type: string
          example: 'EUR'
          deprecated: true
        credit_amount_cents:
          type: integer
          example: 20
          deprecated: true
        credit_amount_currency:
          type: string
          example: 'EUR'
          deprecated: true
        total_amount_currency:
          type: string
          example: 'EUR'
          deprecated: true
        legacy:
          type: boolean
          example: true
          deprecated: true
        file_url:
          type: string
          example: 'https://example.com'
        customer:
          $ref: '#/components/schemas/CustomerObject'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceMetadataObject'
    InvoiceObjectExtended:
      allOf:
        - $ref: '#/components/schemas/InvoiceObject'
        - type: object
          required:
            - subscriptions
            - fees
            - credits
          properties:
            credits:
              type: array
              items:
                $ref: '#/components/schemas/CreditObject'
            fees:
              type: array
              items:
                $ref: '#/components/schemas/FeeObject'
            subscriptions:
              type: array
              items:
                $ref: '#/components/schemas/SubscriptionObject'
    Invoice:
      type: object
      required:
        - invoice
      properties:
        invoice:
          $ref: '#/components/schemas/InvoiceObjectExtended'
    InvoicesPaginated:
      type: object
      required:
        - invoices
        - meta
      properties:
        invoices:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    InvoiceInput:
      type: object
      required:
        - invoice
      properties:
        invoice:
          type: object
          properties:
            payment_status:
              type: string
              description: Status
              enum:
                - pending
                - succeeded
                - failed
            metadata:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: 'uuid'
                    example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
                  key:
                    type: string
                    example: 'name'
                  value:
                    type: string
                    example: 'John'
    InvoiceOneOffInput:
      type: object
      required:
        - invoice
      properties:
        invoice:
          type: object
          required:
            - external_customer_id
          properties:
            external_customer_id:
              type: string
              example: '_ID_'
            currency:
              type: string
              example: 'EUR'
            fees:
              type: array
              items:
                type: object
                required:
                  - add_on_code
                properties:
                  add_on_code:
                    type: string
                    example: '12345'
                  unit_amount_cents:
                    type: integer
                    example: 1200
                  units:
                    type: number
                    example: 2.5
                  description:
                    type: string
                    example: 'This is description'
    WalletObject:
      type: object
      required:
        - lago_id
        - lago_customer_id
        - external_customer_id
        - status
        - currency
        - rate_amount
        - credits_balance
        - balance
        - balance_cents
        - consumed_credits
        - created_at
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        lago_customer_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        external_customer_id:
          type: string
          example: '12345'
        status:
          type: string
          description: Status
          enum:
            - active
            - terminated
        currency:
          type: string
          example: 'EUR'
        name:
          type: string
          example: 'Name'
        rate_amount:
          type: number
          example: 2.0
        credits_balance:
          type: number
          example: 500.0
        balance:
          type: number
          example: 1000.0
          deprecated: true
        balance_cents:
          type: integer
          example: 100000
        consumed_credits:
          type: number
          example: 100.0
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        expiration_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T23:59:59Z'
        last_balance_sync_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        last_consumed_credit_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        terminated_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
    Wallet:
      type: object
      required:
        - wallet
      properties:
        wallet:
          $ref: '#/components/schemas/WalletObject'
    WalletsPaginated:
      type: object
      required:
        - wallets
        - meta
      properties:
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/WalletObject'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    WalletInput:
      type: object
      properties:
        wallet:
          type: object
          required:
            - rate_amount
            - currency
            - external_customer_id
          properties:
            name:
              type: string
              example: 'Wallet name'
            rate_amount:
              type: number
              example: 2.0
            currency:
              type: string
              example: 'EUR'
            paid_credits:
              type: number
              example: 500.0
            granted_credits:
              type: number
              example: 10.0
            external_customer_id:
              type: string
              example: '12345'
            expiration_at:
              type: string
              format: 'date-time'
              example: '2022-09-14T23:59:59Z'
    WalletUpdateInput:
      type: object
      required:
        - wallet
      properties:
        wallet:
          type: object
          properties:
            name:
              type: string
              example: 'Wallet name'
            expiration_at:
              type: string
              format: 'date-time'
              example: '2022-09-14T23:59:59Z'
    WalletTransactionObject:
      type: object
      required:
        - lago_id
        - lago_wallet_id
        - status
        - transaction_type
        - credit_amount
        - amount
        - created_at
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        lago_wallet_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        status:
          type: string
          description: Status
          enum:
            - pending
            - settled
        transaction_type:
          type: string
          description: Transaction type
          enum:
            - inbound
            - outbound
        amount:
          type: number
          example: 500.0
        credit_amount:
          type: number
          example: 100.0
        settled_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
    WalletTransactions:
      type: object
      required:
        - wallet_transactions
      properties:
        wallet_transactions:
          type: array
          items:
            $ref: '#/components/schemas/WalletTransactionObject'
    WalletTransactionsPaginated:
      allOf:
        - $ref: '#/components/schemas/WalletTransactions'
        - type: object
          required:
            - meta
          properties:
            meta:
              $ref: '#/components/schemas/PaginationMeta'
    WalletTransactionInput:
      type: object
      required:
        - wallet_transaction
      properties:
        wallet_transaction:
          type: object
          required:
            - wallet_id
          properties:
            wallet_id:
              type: string
              format: 'uuid'
              example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
            paid_credits:
              type: number
              example: 100.0
            granted_credits:
              type: number
              example: 10.0
    CreditNoteItemObject:
      type: object
      required:
        - lago_id
        - amount_cents
        - amount_currency
        - fee
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        amount_cents:
          type: integer
          example: 1220
        amount_currency:
          type: string
          example: 'EUR'
        fee:
          $ref: '#/components/schemas/FeeObject'
    CreditNoteObject:
      type: object
      required:
        - lago_id
        - sequential_id
        - number
        - lago_invoice_id
        - invoice_number
        - issuing_date
        - reason
        - currency
        - total_amount_cents
        - total_amount_currency
        - credit_amount_cents
        - credit_amount_currency
        - refund_amount_cents
        - refund_amount_currency
        - balance_amount_cents
        - balance_amount_currency
        - vat_amount_cents
        - vat_amount_currency
        - sub_total_vat_excluded_amount_cents
        - sub_total_vat_excluded_amount_currency
        - coupons_adjustement_amount_cents
        - created_at
        - updated_at
      properties:
        lago_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        sequential_id:
          type: integer
          example: 1234
        number:
          type: string
          example: '123456789'
        lago_invoice_id:
          type: string
          format: 'uuid'
          example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
        invoice_number:
          type: string
          example: '123456789'
        issuing_date:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        credit_status:
          type: string
          description: Credit status
          enum:
            - available
            - consumed
            - voided
        refund_status:
          type: string
          description: Refund status
          enum:
            - pending
            - succeeded
            - failed
        reason:
          type: string
          description: Reason
          enum:
            - duplicated_charge
            - product_unsatisfactory
            - order_change
            - order_cancellation
            - fraudulent_charge
            - other
        description:
          type: string
          example: 'description'
        currency:
          type: string
          example: 'EUR'
        total_amount_cents:
          type: integer
          example: 1220
        total_amount_currency:
          type: string
          example: 'EUR'
          deprecated: true
        vat_amount_cents:
          type: integer
          example: 20
        vat_amount_currency:
          type: string
          example: 'EUR'
          deprecated: true
        sub_total_vat_excluded_amount_cents:
          type: integer
          example: 1000
        sub_total_vat_excluded_amount_currency:
          type: string
          example: 'EUR'
          deprecated: true
        balance_amount_cents:
          type: integer
          example: 20
        balance_amount_currency:
          type: string
          example: 'EUR'
          deprecated: true
        credit_amount_cents:
          type: integer
          example: 20
        credit_amount_currency:
          type: string
          example: 'EUR'
          deprecated: true
        refund_amount_cents:
          type: integer
          example: 20
        refund_amount_currency:
          type: string
          example: 'EUR'
          deprecated: true
        coupons_adjustement_amount_cents:
          type: integer
          example: 20
        created_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        updated_at:
          type: string
          format: 'date-time'
          example: '2022-09-14T16:35:31Z'
        file_url:
          type: string
          example: 'https://example.com'
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreditNoteItemObject'
    CreditNote:
      type: object
      required:
        - credit_note
      properties:
        credit_note:
          $ref: '#/components/schemas/CreditNoteObject'
    CreditNotes:
      type: object
      required:
        - credit_notes
      properties:
        credit_notes:
          type: array
          items:
            $ref: '#/components/schemas/CreditNoteObject'
    CreditNoteInput:
      type: object
      required:
        - credit_note
      properties:
        credit_note:
          type: object
          required:
            - invoice_id
            - reason
            - items
            - credit_amount_cents
            - refund_amount_cents
          properties:
            invoice_id:
              type: string
              format: 'uuid'
              example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
            reason:
              type: string
              description: Reason
              enum:
                - duplicated_charge
                - product_unsatisfactory
                - order_change
                - order_cancellation
                - fraudulent_charge
                - other
            description:
              type: string
              example: 'description'
            credit_amount_cents:
              type: integer
              example: 20
            refund_amount_cents:
              type: integer
              example: 20
            items:
              type: array
              items:
                type: object
                required:
                  - fee_id
                  - amount_cents
                properties:
                  fee_id:
                    type: string
                    format: 'uuid'
                    example: '1a901a90-1a90-1a90-1a90-1a901a901a90'
                  amount_cents:
                    type: integer
                    example: 20
    CreditNoteUpdateInput:
      type: object
      required:
        - credit_note
      properties:
        credit_note:
          type: object
          required:
            - refund_status
          properties:
            refund_status:
              type: string
              description: Refund status
              enum:
                - pending
                - succeeded
                - failed
    PaginationMeta:
      type: object
      required:
        - current_page
        - total_pages
        - total_count
      properties:
        current_page:
          type: integer
          description: Current page
        next_page:
          type: integer
          description: Next page
        prev_page:
          type: integer
          description: Previous page
        total_pages:
          type: integer
          description: Total number of pages
        total_count:
          type: integer
          description: Total number of records
    ApiResponseBadRequest:
      type: object
      required:
        - status
        - error
      properties:
        status:
          type: integer
          format: int32
          example: 400
        error:
          type: string
          example: 'Bad request'
    ApiResponseUnauthorized:
      type: object
      required:
        - status
        - error
      properties:
        status:
          type: integer
          format: int32
          example: 401
        error:
          type: string
          example: 'Unauthorized'
    ApiResponseUnprocessableEntity:
      type: object
      required:
        - status
        - error
        - code
        - error_details
      properties:
        status:
          type: integer
          format: int32
          example: 422
        error:
          type: string
          example: 'Unprocessable entity'
        code:
          type: string
          example: 'validation_errors'
        error_details:
          type: object
    ApiResponseNotFound:
      type: object
      required:
        - status
        - error
        - code
      properties:
        status:
          type: integer
          format: int32
          example: 404
        error:
          type: string
          example: 'Not Found'
        code:
          type: string
          example: 'object_not_found'
    ApiResponseForbidden:
      type: object
      required:
        - status
        - error
        - code
      properties:
        status:
          type: integer
          format: int32
          example: 403
        error:
          type: string
          example: 'Forbidden'
        code:
          type: string
          example: 'feature_unavailable'
    ApiResponseNotAllowed:
      type: object
      required:
        - status
        - error
        - code
      properties:
        status:
          type: integer
          format: int32
          example: 405
        error:
          type: string
          example: 'Method Not Allowed'
        code:
          type: string
          example: 'not_allowed'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
